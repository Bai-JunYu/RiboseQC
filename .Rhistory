fivs_gen<-fivs_gen[fivs_gen$hit]
fivs_gen<-split(fivs_gen,names(fivs_gen))
threes<-GRanges(seqnames = seqnames(GTF_annotation$cds_txs_coords),ranges = IRanges(start=end(GTF_annotation$cds_txs_coords),end = GTF_annotation$cds_txs_coords$lentx),strand="*")
threes<-threes[as.character(seqnames(threes))%in%ok_txs]
threes_gen<-unlist(pmapFromTranscripts(threes,transcripts = GTF_annotation$exons_txs[as.character(seqnames(threes))],ignore.strand=F))
threes_gen<-threes_gen[threes_gen$hit]
threes_gen<-split(threes_gen,names(threes_gen))
cds_gen<-GTF_annotation$cds_txs[ok_txs]
tile_cds<-tile_cds[as.character(seqnames(tile_cds))%in%ok_txs]
ok_txs<-unique(as.character(seqnames(tile_cds)))
seqlevels(tile_cds)<-ok_txs
list_covs<-list()
list_covs[["all"]]<-covtx
tile_5<-GRanges(seqnames(tile_cds),ranges = IRanges(start=1,end = start(tile_cds)))
tile_3<-GRanges(seqnames(tile_cds),ranges = IRanges(start = end(tile_cds),end = seqlengths(tile_cds)[as.vector(seqnames(tile_cds))]))
no5utr<-width(tile_5)<51
no3utr<-width(tile_3)<51
ex_annot<-GTF_annotation$exons_txs
if(sum(no5utr)>0){
tx_notok<-seqnames(tile_5)[no5utr]
annot_notok<-ex_annot[tx_notok]
annot_ok<-GRangesList(lapply(annot_notok, function(x){
if(length(x)==0){return(x)}
x[1]<-resize(x[1],width = width(x[1])+51,fix = "end")
x
}))
ex_annot[names(annot_ok)]<-annot_ok
seqlengths(tile_cds)[as.vector(tx_notok)]<-sum(width(annot_ok))
tile_cds[no5utr]<-shift(tile_cds[no5utr],+51)
tile_5<-GRanges(seqnames(tile_cds),ranges = IRanges(start=1,end = start(tile_cds)))
tile_3<-GRanges(seqnames(tile_cds),ranges = IRanges(start = end(tile_cds),end = seqlengths(tile_cds)[as.vector(seqnames(tile_cds))]))
mp<-mapToTranscripts(all_ps,transcripts = ex_annot[as.vector(seqnames(tile_cds))])
seqlevels(mp)<-seqlevels(tile_cds)
seqlengths(mp)<-seqlengths(tile_cds)
mp$score<-all_ps$score[mp$xHits]
covtx<-coverage(mp,weight = mp$score)
list_covs[["all"]]<-covtx
}
if(sum(no3utr)>0){
tx_notok<-seqnames(tile_3)[no3utr]
annot_notok<-ex_annot[tx_notok]
annot_ok<-GRangesList(lapply(annot_notok, function(x){
if(length(x)==0){return(x)}
x[length(x)]<-resize(x[length(x)],width = width(x[length(x)])+51,fix = "start")
x
}))
ex_annot[names(annot_ok)]<-annot_ok
seqlengths(tile_cds)[as.vector(tx_notok)]<-sum(width(annot_ok))
tile_5<-GRanges(seqnames(tile_cds),ranges = IRanges(start=1,end = start(tile_cds)))
tile_3<-GRanges(seqnames(tile_cds),ranges = IRanges(start = end(tile_cds),end = seqlengths(tile_cds)[as.vector(seqnames(tile_cds))]))
mp<-mapToTranscripts(all_ps,transcripts = ex_annot[as.vector(seqnames(tile_cds))])
seqlevels(mp)<-seqlevels(tile_cds)
seqlengths(mp)<-seqlengths(tile_cds)
mp$score<-all_ps$score[mp$xHits]
covtx<-coverage(mp,weight = mp$score)
list_covs[["all"]]<-covtx
}
ps_tiles<-DataFrameList()
ps_win<-DataFrameList()
cod_win<-DataFrameList()
ps_cod<-DataFrameList()
ps_cod_rat<-DataFrameList()
if((sum(no3utr) + sum(no5utr))==0){
mp<-mapToTranscripts(ps_comp[[len]],transcripts = fivs_gen)
mp$score<-ps_comp[[len]]$score[mp$xHits]
seqlevels(mp)<-names(fivs_gen)
seqlengths(mp)<-sum(width(fivs_gen))
cov_5<-coverage(mp,weight = mp$score)
mp<-mapToTranscripts(ps_comp[[len]],transcripts = threes_gen)
mp$score<-ps_comp[[len]]$score[mp$xHits]
seqlevels(mp)<-names(threes_gen)
seqlengths(mp)<-sum(width(threes_gen))
cov_3<-coverage(mp,weight = mp$score)
mp<-mapToTranscripts(ps_comp[[len]],transcripts = cds_gen)
mp$score<-ps_comp[[len]]$score[mp$xHits]
seqlevels(mp)<-names(cds_gen)
seqlengths(mp)<-sum(width(cds_gen))
cov_cds<-coverage(mp,weight = mp$score)
}
if((sum(no3utr) + sum(no5utr))>0){
mp<-mapToTranscripts(ps_comp[[len]],transcripts = ex_annot[as.vector(seqnames(tile_cds))])
mp$score<-ps_comp[[len]]$score[mp$xHits]
seqlevels(mp)<-seqlevels(tile_cds)
seqlengths(mp)<-seqlengths(tile_cds)
covtx<-coverage(mp,weight = mp$score)
covtx<-covtx[ok_txs]
cov_5<-covtx[tile_5]
cov_3<-covtx[tile_3]
cov_cds<-covtx[tile_cds]
}
tile_5
ps_tiles_5<-DataFrame(t(sapply(cov_5,function(x){
clos<-50*(round(length(x)/50,digits = 0)+1)
idx<-as.integer(seq(1,length(x),length.out = clos))
colMeans(matrix(x[idx],ncol = 50))
})))
ps_win_5<-DataFrame(t(sapply(cov_5,function(x){as.vector(x)[c(1:25,(length(x)-25):(length(x)-1))]})))
ps_tiles_3<-DataFrame(t(sapply(cov_3,function(x){
clos<-50*(round(length(x)/50,digits = 0)+1)
idx<-as.integer(seq(1,length(x),length.out = clos))
colMeans(matrix(x[idx],ncol = 50))
})))
ps_win_3<-DataFrame(t(sapply(cov_3,function(x){as.vector(x)[c(2:26,(length(x)-24):length(x))]})))
ps_tiles_cds<-DataFrame(t(sapply(cov_cds,function(x){
clos<-100*(round(length(x)/100,digits = 0)+1)
idx<-as.integer(seq(1,length(x),length.out = clos))
colMeans(matrix(x[idx],ncol = 100))
})))
ps_win_cds<-DataFrame(t(sapply(cov_cds,function(x){
rnd<-as.integer(length(x)/2)%%3
mid<-(as.integer(length(x)/2)-rnd)
as.vector(x)[c(1:33,(mid-17):(mid+15),(length(x)-32):length(x))]
})))
#select txs, output codon usage
txs_seqq<-extractTranscriptSeqs(x = genome_seq,transcripts = GTF_annotation$cds_txs[names(cov_cds)])
gco <- as.character(names(getGeneticCode("1")))
names(gco)<-as.character(getGeneticCode("1"))
#Get genetic code for compartment
gen_cods<-GTF_annotation$genetic_codes
circ_cods<-which(comp==rownames(gen_cods))
if(length(circ_cods)>0){
gco <- as.character(names(getGeneticCode(gen_cods$genetic_code[circ_cods])))
names(gco)<-as.character(getGeneticCode(gen_cods$genetic_code[circ_cods]))
}
rnd<-as.integer(width(txs_seqq)/2)%%3
st_pos<-rep(1,length(txs_seqq))
mid_pos<-(as.integer(width(txs_seqq)/2)-rnd)-17
end_pos<-width(txs_seqq)-32
iters<-seq(0,10)
cod_counts<-c()
psit_counts<-c()
i=0
a<-narrow(txs_seqq,start = st_pos+3*i,end = st_pos+(2+3*i))
coood<-as.character(a)
at<-table(a)
cod_cntt<-rep(0,length(gco))
names(cod_cntt)<-gco
cod_cntt[names(at)]<-as.numeric(at)
cod_counts<-cbind(cod_counts,cod_cntt)
pt<-rowSums(as.matrix(ps_win_cds[,(1+3*i):(3+3*i)]))
pt
dim(ps_win_cds)
ps_win_cds
rowSums(as.matrix(ps_win_cds))
res_RS$profiles_P_sites$P_sites_subcodon
res_RS$profiles_P_sites$P_sites_percodon
res_RS$profiles_P_sites$P_sites_percodon$nucl
res_RS$profiles_P_sites$P_sites_percodon$nucl[["all"]]
rowSums(res_RS$profiles_P_sites$P_sites_percodon$nucl[["all"]])
res_RS$sequence_analysis
res_RS$profiles_P_sites$Codon_counts
res_RS$P_sites_stats$P_sites_all
mp
cov_cds_a<-coverage(shift(mp,shift = 3),weight = mp$score)
cov_cds_a
cov_cds_a<-suppressWarnings(coverage(shift(mp,shift = 3),weight = mp$score))
cov_cds_e<-suppressWarnings(coverage(shift(mp,shift = -3),weight = mp$score))
cov_cds_a
cov_cds_e
cov_cds_a
cov_cds
cov_cds_e
c("P_sites_bins","P_sites_subcodon","Codon_counts","P_sites_percodon","P_sites_percodon_ratio",
"A_sites_percodon","A_sites_percodon_ratio","E_sites_percodon","E_sites_percodon_ratio")
mp
posits_st<-unlist(res_SSU$read_stats$reads_pos1)
posits_st<-resize(posits_st,width = as.numeric(names(posits_st)),fix = "start")
mapp<-mapToTranscripts(posits_st,transcripts = extended_txs)
mapp$score<-posits_st$score[mapp$xHits]
mapp$rl<-as.numeric(names(posits_st)[mapp$xHits])
txs_seqs<-extractTranscriptSeqs(genome_seq,transcripts = extended_txs)
#CHECK THIS
strand(mapp)<-"+"
mapp$sequence<-narrow(txs_seqs[as.character(seqnames(mapp))],start = start(mapp),end = end(mapp))
mapp
pars
mappars
mappars
coverage(mapparscovparscovpars
covpars
covp<-covpars[mapp]
date()
#3:54
covp
mapp$covpars<-covp
mapp
mapp[length(mapp)]
mapp[length(mapp)]$covpars
mapp[length(mapp)]$covpars[[1]]
covp
mapp
extended_txs_cds
cdspos<-extended_txs
strand(cdspos)<-"+"
cdspos
cdspos<-extended_txs_cds
strand(cdspos)<-"+"
cdspos
resize(cdspos,width = start(resize)-25,fix = 1)
resize(cdspos,width = start(resize)-25,fix = 1)
resize(cdspos,width = start(cdspos)-25,fix = 1)
resize(shift(cdspos,-25),width = start(cdspos)-25,fix = "start")
GRanges(seqnames(cdspos),ranges = IRanges(start=1,end = start(cdspos)-25))
maprl[maprl%over%GRanges(seqnames(cdspos),ranges = IRanges(start=1,end = start(cdspos)-25))]
unique(mapp$rl)
i=unique(mapp$rl)[1]
list_positss<-list()
maprl<-mapp[mapp$rl==i]
maprl[maprl%over%GRanges(seqnames(cdspos),ranges = IRanges(start=1,end = start(cdspos)-25))]
cdspos["YPR193C"]
cdspos
list_vals_rl<-list()
for(i in unique(mapp$rl)){
list_positss<-list()
maprl<-mapp[mapp$rl==i]
list_positss[["five_ut"]]<-maprl[maprl%over%GRanges(seqnames(cdspos),ranges = IRanges(start=1,end = start(cdspos)-25))]
list_positss[["start_codon"]]<-maprl[maprl%over%GRanges(seqnames(cdspos),ranges = IRanges(start=start(cdspos)-25,end = start(cdspos)+25))]
list_positss[["cds"]]<-maprl[maprl%over%GRanges(seqnames(cdspos),ranges = IRanges(start=start(cdspos)+26,end = end(cdspos)-25))]
list_positss[["stop_codon"]]<-maprl[maprl%over%GRanges(seqnames(cdspos),ranges = IRanges(start=end(cdspos)-25,end = end(cdspos)+25))]
list_positss[["three_ut"]]<-maprl[maprl%over%GRanges(seqnames(cdspos),ranges = IRanges(start=end(cdspos)+25,end = cdspos$lentx ))]
list_vals_rl[[as.character(i)]]<-list_positss
}
i
list_positss<-list()
maprl<-mapp[mapp$rl==i]
list_positss[["five_ut"]]<-maprl[maprl%over%GRanges(seqnames(cdspos),ranges = IRanges(start=1,end = start(cdspos)-25))]
list_positss[["start_codon"]]<-maprl[maprl%over%GRanges(seqnames(cdspos),ranges = IRanges(start=start(cdspos)-25,end = start(cdspos)+25))]
list_positss[["cds"]]<-maprl[maprl%over%GRanges(seqnames(cdspos),ranges = IRanges(start=start(cdspos)+26,end = end(cdspos)-25))]
list_positss[["stop_codon"]]<-maprl[maprl%over%GRanges(seqnames(cdspos),ranges = IRanges(start=end(cdspos)-25,end = end(cdspos)+25))]
list_positss[["three_ut"]]<-maprl[maprl%over%GRanges(seqnames(cdspos),ranges = IRanges(start=end(cdspos)+25,end = cdspos$lentx ))]
cdspos$lentx
end(cdspos)+25>cdspos$lentx
which((end(cdspos)+25)>cdspos$lentx)
cdspos
list_positss[["three_ut"]]<-maprl[maprl%over%GRanges(seqnames(cdspos),ranges = IRanges(start=end(cdspos)+25,end = cdspos$lentx+300 ))]
list_vals_rl<-list()
for(i in unique(mapp$rl)){
list_positss<-list()
maprl<-mapp[mapp$rl==i]
list_positss[["five_ut"]]<-maprl[maprl%over%GRanges(seqnames(cdspos),ranges = IRanges(start=1,end = start(cdspos)-25))]
list_positss[["start_codon"]]<-maprl[maprl%over%GRanges(seqnames(cdspos),ranges = IRanges(start=start(cdspos)-25,end = start(cdspos)+25))]
list_positss[["cds"]]<-maprl[maprl%over%GRanges(seqnames(cdspos),ranges = IRanges(start=start(cdspos)+26,end = end(cdspos)-25))]
list_positss[["stop_codon"]]<-maprl[maprl%over%GRanges(seqnames(cdspos),ranges = IRanges(start=end(cdspos)-25,end = end(cdspos)+25))]
list_positss[["three_ut"]]<-maprl[maprl%over%GRanges(seqnames(cdspos),ranges = IRanges(start=end(cdspos)+25,end = cdspos$lentx+300 ))]
list_vals_rl[[as.character(i)]]<-list_positss
}
list_vals_rl$`21`
list_vals_rl$`20`
ggseqlogo(as.character(list_vals_rl$`20`$five_ut$sequence))
ggseqlogo(as.character(list_vals_rl$`20`$five_ut$sequence))
ggseqlogo(as.character(list_vals_rl$`20`$start_codon$sequence))
ggseqlogo(as.character(list_vals_rl$`20`$cds$sequence))
ggseqlogo(as.character(list_vals_rl$`20`$stop_codon$sequence))
ggseqlogo(as.character(list_vals_rl$`20`$three_ut$sequence))
ggseqlogo(as.character(list_vals_rl$`20`$start_codon$sequence))
ggseqlogo(as.character(list_vals_rl$`20`$cds$sequence))
ggseqlogo(as.character(list_vals_rl$`20`$start_codon$sequence))
list_vals_rl$`20`$start_codon
list_vals_rl$`20`$start_codon["YPR166C"]
list_vals_rl$`20`$start_codon[["YPR166C"]]
names(maprl)
list_vals_rl<-list()
for(i in unique(mapp$rl)){
list_positss<-list()
maprl<-mapp[mapp$rl==i]
names(maprl)<-as.character(names(maprl))
list_positss[["five_ut"]]<-maprl[maprl%over%GRanges(seqnames(cdspos),ranges = IRanges(start=1,end = start(cdspos)-25))]
list_positss[["start_codon"]]<-maprl[maprl%over%GRanges(seqnames(cdspos),ranges = IRanges(start=start(cdspos)-25,end = start(cdspos)+25))]
list_positss[["cds"]]<-maprl[maprl%over%GRanges(seqnames(cdspos),ranges = IRanges(start=start(cdspos)+26,end = end(cdspos)-25))]
list_positss[["stop_codon"]]<-maprl[maprl%over%GRanges(seqnames(cdspos),ranges = IRanges(start=end(cdspos)-25,end = end(cdspos)+25))]
list_positss[["three_ut"]]<-maprl[maprl%over%GRanges(seqnames(cdspos),ranges = IRanges(start=end(cdspos)+25,end = cdspos$lentx+300 ))]
list_vals_rl[[as.character(i)]]<-list_positss
}
rownames(rowsrl_few)[rowsrl_few$class=="low"]
list_vals_rl$`20`$start_codon[rownames(rowsrl_few)[rowsrl_few$class=="low"]]
list_vals_rl$`20`$start_codon
maprl
source('~/.active-rstudio-document', echo=TRUE)
list_vals_rl<-list()
for(i in unique(mapp$rl)){
list_positss<-list()
maprl<-mapp[mapp$rl==i]
names(maprl)<-as.character(seqnames(maprl))
list_positss[["five_ut"]]<-maprl[maprl%over%GRanges(seqnames(cdspos),ranges = IRanges(start=1,end = start(cdspos)-25))]
list_positss[["start_codon"]]<-maprl[maprl%over%GRanges(seqnames(cdspos),ranges = IRanges(start=start(cdspos)-25,end = start(cdspos)+25))]
list_positss[["cds"]]<-maprl[maprl%over%GRanges(seqnames(cdspos),ranges = IRanges(start=start(cdspos)+26,end = end(cdspos)-25))]
list_positss[["stop_codon"]]<-maprl[maprl%over%GRanges(seqnames(cdspos),ranges = IRanges(start=end(cdspos)-25,end = end(cdspos)+25))]
list_positss[["three_ut"]]<-maprl[maprl%over%GRanges(seqnames(cdspos),ranges = IRanges(start=end(cdspos)+25,end = cdspos$lentx+300 ))]
list_vals_rl[[as.character(i)]]<-list_positss
}
list_vals_rl$`20`$start_codon[rownames(rowsrl_few)[rowsrl_few$class=="low"]]
list_vals_rl$`20`$start_codon
list_vals_rl$`20`$start_codon[names(list_vals_rl$`20`$start_codon)%in%rownames(rowsrl_few)[rowsrl_few$class=="low"]]
ggseqlogo(as.character(list_vals_rl$`20`$start_codon$sequence))
ggseqlogo(list_vals_rl$`20`$start_codon[names(list_vals_rl$`20`$start_codon)%in%rownames(rowsrl_few)[rowsrl_few$class=="low"]])
ggseqlogo(as.character(list_vals_rl$`20`$start_codon$sequence))
ggseqlogo(list_vals_rl$`20`$start_codon[names(list_vals_rl$`20`$start_codon)%in%rownames(rowsrl_few)[rowsrl_few$class=="low"]]$sequence)
list_vals_rl$`20`$start_codon[names(list_vals_rl$`20`$start_codon)%in%rownames(rowsrl_few)[rowsrl_few$class=="low"]]$sequence
ggseqlogo(as.character(list_vals_rl$`20`$start_codon$sequence))
ggseqlogo(as.character(list_vals_rl$`20`$start_codon[names(list_vals_rl$`20`$start_codon)%in%rownames(rowsrl_few)[rowsrl_few$class=="low"]]$sequence))
ggseqlogo(as.character(list_vals_rl$`20`$start_codon[names(list_vals_rl$`20`$start_codon)%in%rownames(rowsrl_few)[rowsrl_few$class=="mid"]]$sequence))
ggseqlogo(as.character(list_vals_rl$`20`$start_codon[names(list_vals_rl$`20`$start_codon)%in%rownames(rowsrl_few)[rowsrl_few$class=="high"]]$sequence))
mapp
ggseqlogo(as.character(list_vals_rl$`21`$start_codon$sequence))
ggseqlogo(as.character(list_vals_rl$`21`$start_codon[names(list_vals_rl$`21`$start_codon)%in%rownames(rowsrl_few)[rowsrl_few$class=="low"]]$sequence))
ggseqlogo(as.character(list_vals_rl$`21`$start_codon[names(list_vals_rl$`21`$start_codon)%in%rownames(rowsrl_few)[rowsrl_few$class=="mid"]]$sequence))
ggseqlogo(as.character(list_vals_rl$`21`$start_codon[names(list_vals_rl$`21`$start_codon)%in%rownames(rowsrl_few)[rowsrl_few$class=="high"]]$sequence))
ggseqlogo(as.character(list_vals_rl$`21`$start_codon$sequence))
ggseqlogo(as.character(list_vals_rl$`21`$start_codon[names(list_vals_rl$`21`$start_codon)%in%rownames(rowsrl_few)[rowsrl_few$class=="low"]]$sequence))
ggseqlogo(as.character(list_vals_rl$`21`$start_codon[names(list_vals_rl$`21`$start_codon)%in%rownames(rowsrl_few)[rowsrl_few$class=="mid"]]$sequence))
ggseqlogo(as.character(list_vals_rl$`21`$start_codon[names(list_vals_rl$`21`$start_codon)%in%rownames(rowsrl_few)[rowsrl_few$class=="high"]]$sequence))
ggseqlogo(as.character(list_vals_rl$`29`$start_codon$sequence))
ggseqlogo(as.character(list_vals_rl$`29`$start_codon[names(list_vals_rl$`21`$start_codon)%in%rownames(rowsrl_few)[rowsrl_few$class=="low"]]$sequence))
ggseqlogo(as.character(list_vals_rl$`29`$start_codon[names(list_vals_rl$`21`$start_codon)%in%rownames(rowsrl_few)[rowsrl_few$class=="mid"]]$sequence))
ggseqlogo(as.character(list_vals_rl$`29`$start_codon[names(list_vals_rl$`21`$start_codon)%in%rownames(rowsrl_few)[rowsrl_few$class=="high"]]$sequence))
ggseqlogo(as.character(list_vals_rl$`29`$start_codon$sequence))
ggseqlogo(as.character(list_vals_rl$`29`$start_codon[names(list_vals_rl$`29`$start_codon)%in%rownames(rowsrl_few)[rowsrl_few$class=="low"]]$sequence))
ggseqlogo(as.character(list_vals_rl$`29`$start_codon[names(list_vals_rl$`29`$start_codon)%in%rownames(rowsrl_few)[rowsrl_few$class=="mid"]]$sequence))
ggseqlogo(as.character(list_vals_rl$`29`$start_codon[names(list_vals_rl$`29`$start_codon)%in%rownames(rowsrl_few)[rowsrl_few$class=="high"]]$sequence))
ggseqlogo(as.character(list_vals_rl$`29`$start_codon[names(list_vals_rl$`29`$start_codon)%in%rownames(rowsrl_few)[rowsrl_few$class=="low"]]$sequence))
ggseqlogo(as.character(list_vals_rl$`29`$start_codon[names(list_vals_rl$`29`$start_codon)%in%rownames(rowsrl_few)[rowsrl_few$class=="mid"]]$sequence))
ggseqlogo(as.character(list_vals_rl$`29`$start_codon[names(list_vals_rl$`29`$start_codon)%in%rownames(rowsrl_few)[rowsrl_few$class=="high"]]$sequence))
names(list_vals_rl$`29`$start_codon)%in%rownames(rowsrl_few)[rowsrl_few$class=="low"
]
ggseqlogo(as.character(list_vals_rl$`20`$five_ut$sequence))
ggseqlogo(as.character(list_vals_rl$`20`$start_codon$sequence))
ggseqlogo(as.character(list_vals_rl$`20`$cds$sequence))
ggseqlogo(as.character(list_vals_rl$`20`$stop_codon$sequence))
ggseqlogo(as.character(list_vals_rl$`20`$three_ut$sequence))
GRanges(seqnames(cdspos),ranges = IRanges(start=start(cdspos)-25,end = start(cdspos)+25))
list_vals_rl$`20`$start_codon
?ggseqlogo
as.character(list_vals_rl$`20`$five_ut$sequence)
rids<-list_vals_rl$`20`$five_ut
rids$sequence
cbind(rids$sequence,rids$score)
cbind(as.character(rids$sequence),rids$score)
seqsi<-apply(cbind(as.character(rids$sequence),rids$score),1,function(x){rep(x[1],as.numeric(x[2]))})
head(seqsi)
seqsi<-unlist(apply(cbind(as.character(rids$sequence),rids$score),1,function(x){rep(x[1],as.numeric(x[2]))}))
ggseqlogo(seqsi)
rids<-list_vals_rl$`20`$start_codon
seqsi<-unlist(apply(cbind(as.character(rids$sequence),rids$score),1,function(x){rep(x[1],as.numeric(x[2]))}))
ggseqlogo(seqsi)
txs_seqs
narrow(txs_seqs[as.character(seqnames(mapp))],start = start(mapp),end=start(mapp)+3)
narrow(txs_seqs[as.character(seqnames(mapp))],start = start(mapp),end=start(mapp)+2)
table(narrow(txs_seqs[as.character(seqnames(mapp))],start = start(mapp),end=start(mapp)+2))
sort(table(narrow(txs_seqs[as.character(seqnames(mapp))],start = start(mapp),end=start(mapp)+2)))
sort(table(narrow(txs_seqs,start = start(txs_seqs),end=start(txs_seqs)+2)))
txs_seqs
sort(table(narrow(txs_seqs,start = start(extended_txs_cds),end=start(extended_txs_cds)+2)))
rids<-list_vals_rl$`20`$start_codon
rids
posits_st
mapp
extended_txs
extended_txs_cds
mapp$dist_start<-start(mapp)-start(extended_txs_cds[as.character(seqnames(mapp))])
mapp$dist_stop<-start(mapp)-end(extended_txs_cds[as.character(seqnames(mapp))])
posits_st<-unlist(res_SSU$read_stats$reads_pos1)
posits_st<-resize(posits_st,width = as.numeric(names(posits_st)),fix = "start")
mapp<-mapToTranscripts(posits_st,transcripts = extended_txs)
mapp$score<-posits_st$score[mapp$xHits]
mapp$rl<-as.numeric(names(posits_st)[mapp$xHits])
mapp$dist_start<-start(mapp)-start(extended_txs_cds[as.character(seqnames(mapp))])
mapp$dist_stop<-start(mapp)-end(extended_txs_cds[as.character(seqnames(mapp))])
txs_seqs<-extractTranscriptSeqs(genome_seq,transcripts = extended_txs)
#CHECK THIS
strand(mapp)<-"+"
mapp$sequence<-narrow(txs_seqs[as.character(seqnames(mapp))],start = start(mapp),end = end(mapp))
covp<-covpars[mapp]
mapp$covpars<-covp
cdspos<-extended_txs_cds
strand(cdspos)<-"+"
list_vals_rl<-list()
mapp
mapp_rl<-split(mapp,mapp$rl)
mapp_rl
rids<-mapp_rl$`20`
rids
sort(table(rids$dist_start))
table(rids$dist_start)
barplot(table(rids$dist_start))
barplot(table(rids$dist_start),xlim=c(-100,100))
barplot(table(rids$dist_start))
barplot(sort(table(rids$dist_start)))
barplot(table(rids$dist_start))
sort(table(rids$dist_start))
hist(rids$dist_start)
hist(rids$dist_start,xlim=c(-100,100),breaks = 200)
hist(rids$dist_start,xlim=c(-100,100),breaks = 2000)
hist(rids$dist_start,xlim=c(-100,100),breaks = 20000)
hist(rids$dist_start,xlim=c(-100,100),breaks = 200000)
hist(rids$dist_start,xlim=c(-50,50),breaks = 200000)
hist(mapp_rl$`20`$dist_start,xlim=c(-50,50),breaks = 200000)
hist(mapp_rl$`28`$dist_start,xlim=c(-50,50),breaks = 200000)
hist(mapp_rl$`35`$dist_start,xlim=c(-50,50),breaks = 200000)
rids<-mapp_rl$`20`[mapp_rl$`20`$dist_start%in%c(-7:7)]
seqsi<-unlist(apply(cbind(as.character(rids$sequence),rids$score),1,function(x){rep(x[1],as.numeric(x[2]))}))
ggseqlogo(seqsi)
rids<-mapp_rl$`20`[mapp_rl$`20`$dist_start%in%c(-13:-10)]
seqsi<-unlist(apply(cbind(as.character(rids$sequence),rids$score),1,function(x){rep(x[1],as.numeric(x[2]))}))
ggseqlogo(seqsi)
rids<-mapp_rl$`20`[mapp_rl$`20`$dist_start%in%c(-12)]
seqsi<-unlist(apply(cbind(as.character(rids$sequence),rids$score),1,function(x){rep(x[1],as.numeric(x[2]))}))
ggseqlogo(seqsi)
rids<-mapp_rl$`20`[mapp_rl$`20`$dist_start%in%c(-11)]
seqsi<-unlist(apply(cbind(as.character(rids$sequence),rids$score),1,function(x){rep(x[1],as.numeric(x[2]))}))
ggseqlogo(seqsi)
install_github("kbroman/broman")
library(devtools)
install_github("lcalviell/Ribo-seQC")
install_github(repo = "lcalviell/Ribo-seQC")
install_github(repo = "lcalviell/Ribo-seQC")
remove.packages("Ribo.seQC")
library(devtools)
setwd("/bfd/lcalviel/Ribo-seQC/Ribo-seQC_Dec2018/")
system("rm -r Ribo.seQC*")
descrip<-list("Name"="Ribo.seQC","Title"="Ribo-seQC, a comprehensive Ribo-seq analysis tool","Authors@R"='c(person("Lorenzo", "Calviello", email = "calviello.l.bio@gmail.com", role = c("aut")),
person("Dominique", "Sydow", email = "dominique.sydow@posteo.de", role = c("aut")),
person("Dermott", "Harnett", email = "Dermot.Harnett@mdc-berlin.de", role = c("ctb","cre")),
person("Uwe", "Ohler", email = "Uwe.Ohler@mdc-berlin.de", role = c("rev","fnd")),
person("Altuna", "Akalin", email = "Altuna.Akalin@mdc-berlin.de", role = c("rev","fnd")))',
"Depends"= c("rmarkdown","rtracklayer","GenomicAlignments","BSgenome","GenomicFiles","devtools","reshape2","ggplot2",
"knitr","DT","gridExtra","ggpubr","viridis","Biostrings","GenomicFeatures","BiocGenerics"),
"Description"= "Ribo-seQC is a powerful analysis tool for the analysis of Ribo-seq data, which is able to provide read-length specific analysis of both cytoplasmic and organellar ribosome, and provides interactive visualization of results in a dynamic html report",
"LazyData"="FALSE","License"="GPL-3 or above","biocViews"=c("RiboSeq", "GenomeAnnotation", "Transcriptomics", "Software"),
"Version"="0.99.0")
create("Ribo.seQC",description = descrip)
#write("import(rmarkdown)\nimport(DT)\nimport(gridExtra)\nimport(ggpubr)\nimport(viridis)\nimport(Biostrings)\nimport(devtools)\nimport(reshape2)\nimport(ggplot2)\nimport(knitr)\nimport(rtracklayer)\nimport(GenomicAlignments)\nimport(BSgenome)\nimport(GenomicFiles)",file =   "/bfd/lcalviel/Ribo-seQC/Ribo-seQC_Dec2018/Ribo.seQC/NAMESPACE",append = T)
write("import(rmarkdown)\nimport(DT)\nimport(gridExtra)\nimport(ggpubr)\nimport(viridis)\nimport(Biostrings)\nimport(devtools)\nimport(reshape2)\nimport(ggplot2)\nimport(knitr)\nimport(rtracklayer)\nimport(GenomicAlignments)\nimport(BSgenome)\nimport(GenomicFiles)\nimport(BiocGenerics)",file =   "/bfd/lcalviel/Ribo-seQC/Ribo-seQC_Dec2018/Ribo.seQC/NAMESPACE",append = T)
#system("cp riboseqc.R Ribo.seQC/R/")
#run this to include A-E sites
system("cp /bfd/lcalviel/Ribo-seQC/Ribo-seQC_Dec2018/riboseqc_withAsites.R Ribo.seQC/R/riboseqc.R")
setwd("Ribo.seQC")
system("mkdir -p inst/rmd")
system("cp ../riboseqc_template.Rmd inst/rmd/")
system("cp ../riboseqc_template_full.Rmd inst/rmd/")
document()
write("import(rmarkdown)\nimport(DT)\nimport(gridExtra)\nimport(ggpubr)\nimport(viridis)\nimport(Biostrings)\nimport(devtools)\nimport(reshape2)\nimport(ggplot2)\nimport(knitr)\nimport(rtracklayer)\nimport(GenomicAlignments)\nimport(BSgenome)\nimport(GenomicFiles)\nimport(BiocGenerics)",file =   "/bfd/lcalviel/Ribo-seQC/Ribo-seQC_Dec2018/Ribo.seQC/NAMESPACE",append = T)
install()
build()
remove.packages("Ribo.seQC")
library(devtools)
setwd("/bfd/lcalviel/Ribo-seQC/Ribo-seQC_Dec2018/")
system("rm -r Ribo.seQC*")
descrip<-list("Name"="Ribo.seQC","Title"="Ribo-seQC, a comprehensive Ribo-seq analysis tool","Authors@R"='c(person("Lorenzo", "Calviello", email = "calviello.l.bio@gmail.com", role = c("aut")),
person("Dominique", "Sydow", email = "dominique.sydow@posteo.de", role = c("aut")),
person("Dermott", "Harnett", email = "Dermot.Harnett@mdc-berlin.de", role = c("ctb","cre")),
person("Uwe", "Ohler", email = "Uwe.Ohler@mdc-berlin.de", role = c("rev","fnd")))',
"Depends"= c("rmarkdown","rtracklayer","GenomicAlignments","BSgenome","GenomicFiles","devtools","reshape2","ggplot2",
"knitr","DT","gridExtra","ggpubr","viridis","Biostrings","GenomicFeatures","BiocGenerics"),
"Description"= "Ribo-seQC is a powerful analysis tool for the analysis of Ribo-seq data, which is able to provide read-length specific analysis of both cytoplasmic and organellar ribosome, and provides interactive visualization of results in a dynamic html report",
"LazyData"="FALSE","License"="GPL-3 or above","biocViews"=c("RiboSeq", "GenomeAnnotation", "Transcriptomics", "Software"),
"Version"="0.99.0")
create("Ribo.seQC",description = descrip)
#write("import(rmarkdown)\nimport(DT)\nimport(gridExtra)\nimport(ggpubr)\nimport(viridis)\nimport(Biostrings)\nimport(devtools)\nimport(reshape2)\nimport(ggplot2)\nimport(knitr)\nimport(rtracklayer)\nimport(GenomicAlignments)\nimport(BSgenome)\nimport(GenomicFiles)",file =   "/bfd/lcalviel/Ribo-seQC/Ribo-seQC_Dec2018/Ribo.seQC/NAMESPACE",append = T)
write("import(rmarkdown)\nimport(DT)\nimport(gridExtra)\nimport(ggpubr)\nimport(viridis)\nimport(Biostrings)\nimport(devtools)\nimport(reshape2)\nimport(ggplot2)\nimport(knitr)\nimport(rtracklayer)\nimport(GenomicAlignments)\nimport(BSgenome)\nimport(GenomicFiles)\nimport(BiocGenerics)",file =   "/bfd/lcalviel/Ribo-seQC/Ribo-seQC_Dec2018/Ribo.seQC/NAMESPACE",append = T)
#system("cp riboseqc.R Ribo.seQC/R/")
#run this to include A-E sites
system("cp /bfd/lcalviel/Ribo-seQC/Ribo-seQC_Dec2018/riboseqc_withAsites.R Ribo.seQC/R/riboseqc.R")
setwd("Ribo.seQC")
system("mkdir -p inst/rmd")
system("cp ../riboseqc_template.Rmd inst/rmd/")
system("cp ../riboseqc_template_full.Rmd inst/rmd/")
document()
write("import(rmarkdown)\nimport(DT)\nimport(gridExtra)\nimport(ggpubr)\nimport(viridis)\nimport(Biostrings)\nimport(devtools)\nimport(reshape2)\nimport(ggplot2)\nimport(knitr)\nimport(rtracklayer)\nimport(GenomicAlignments)\nimport(BSgenome)\nimport(GenomicFiles)\nimport(BiocGenerics)",file =   "/bfd/lcalviel/Ribo-seQC/Ribo-seQC_Dec2018/Ribo.seQC/NAMESPACE",append = T)
install()
build()
suppressPackageStartupMessages(library("Ribo.seQC"))
setwd("/bfd/lcalviel/data/Arabidopsis")
annotation="/bfd/lcalviel/Ribo-seQC/Ribo-seQC_Dec2018/vignettes/test_arabidopsis.gtf.gz_Rannot"
bam_files<-c("/bfd/lcalviel/data/Arabidopsis/results/Root_rep1/starmapp_Root_rep1/Root_rep1_Aligned.sortedByCoord.out.bam",
"/bfd/lcalviel/data/Arabidopsis/results/Root_rep2/starmapp_Root_rep2/Root_rep2_Aligned.sortedByCoord.out.bam",
"/bfd/lcalviel/data/Arabidopsis/results/Root_rep3/starmapp_Root_rep3/Root_rep3_Aligned.sortedByCoord.out.bam",
"/bfd/lcalviel/data/Arabidopsis/results/Shoot_rep1/starmapp_Shoot_rep1/Shoot_rep1_Aligned.sortedByCoord.out.bam",
"/bfd/lcalviel/data/Arabidopsis/results/Shoot_rep2/starmapp_Shoot_rep2/Shoot_rep2_Aligned.sortedByCoord.out.bam",
"/bfd/lcalviel/data/Arabidopsis/results/Shoot_rep3/starmapp_Shoot_rep3/Shoot_rep3_Aligned.sortedByCoord.out.bam")
#RiboseQC_analysis(annotation_file=annotation,bam_files = bam_files,fast_mode = T,report_file = "Root_Shoots_report.html",dest_names = c(paste("roots_",1:3,sep = ""),paste("shoots_",1:3,sep = "")),sample_names = c(paste("roots_",1:3,sep = ""),paste("shoots_",1:3,sep = "")),write_tmp_files = F)
RiboseQC_analysis(annotation_file=annotation,bam_files = bam_files[c(1,4)],fast_mode = T,report_file = "Root_Shoots_report.html",dest_names = c("Roots","Shoots"),sample_names = c("Roots","Shoots"),write_tmp_files = F)
remove.packages("Ribo.seQC")
library(devtools)
setwd("/bfd/lcalviel/Ribo-seQC/Ribo-seQC_Dec2018/")
system("rm -r Ribo.seQC*")
remove.packages("RiboseQC")
library(devtools)
setwd("/bfd/lcalviel/Ribo-seQC/Ribo-seQC_Dec2018/")
system("rm -r RiboseQC*")
descrip<-list("Name"="RiboseQC","Title"="Ribo-seQC, a comprehensive Ribo-seq analysis tool","Authors@R"='c(person("Lorenzo", "Calviello", email = "calviello.l.bio@gmail.com", role = c("aut")),
person("Dominique", "Sydow", email = "dominique.sydow@posteo.de", role = c("aut")),
person("Dermott", "Harnett", email = "Dermot.Harnett@mdc-berlin.de", role = c("ctb","cre")),
person("Uwe", "Ohler", email = "Uwe.Ohler@mdc-berlin.de", role = c("rev","fnd")))',
"Depends"= c("rmarkdown","rtracklayer","GenomicAlignments","BSgenome","GenomicFiles","devtools","reshape2","ggplot2",
"knitr","DT","gridExtra","ggpubr","viridis","Biostrings","GenomicFeatures","BiocGenerics"),
"Description"= "Ribo-seQC is a powerful analysis tool for the analysis of Ribo-seq data, which is able to provide read-length specific analysis of both cytoplasmic and organellar ribosome, and provides interactive visualization of results in a dynamic html report",
"LazyData"="FALSE","License"="GPL-3 or above","biocViews"=c("RiboSeq", "GenomeAnnotation", "Transcriptomics", "Software"),
"Version"="0.99.0")
create("RiboseQC",description = descrip)
#write("import(rmarkdown)\nimport(DT)\nimport(gridExtra)\nimport(ggpubr)\nimport(viridis)\nimport(Biostrings)\nimport(devtools)\nimport(reshape2)\nimport(ggplot2)\nimport(knitr)\nimport(rtracklayer)\nimport(GenomicAlignments)\nimport(BSgenome)\nimport(GenomicFiles)",file =   "/bfd/lcalviel/Ribo-seQC/Ribo-seQC_Dec2018/RiboseQC/NAMESPACE",append = T)
write("import(rmarkdown)\nimport(DT)\nimport(gridExtra)\nimport(ggpubr)\nimport(viridis)\nimport(Biostrings)\nimport(devtools)\nimport(reshape2)\nimport(ggplot2)\nimport(knitr)\nimport(rtracklayer)\nimport(GenomicAlignments)\nimport(BSgenome)\nimport(GenomicFiles)\nimport(BiocGenerics)",file =   "/bfd/lcalviel/Ribo-seQC/Ribo-seQC_Dec2018/RiboseQC/NAMESPACE",append = T)
#system("cp riboseqc.R RiboseQC/R/")
#run this to include A-E sites
system("cp /bfd/lcalviel/Ribo-seQC/Ribo-seQC_Dec2018/riboseqc_withAsites.R RiboseQC/R/riboseqc.R")
setwd("RiboseQC")
system("mkdir -p inst/rmd")
system("cp ../riboseqc_template.Rmd inst/rmd/")
system("cp ../riboseqc_template_full.Rmd inst/rmd/")
document()
write("import(rmarkdown)\nimport(DT)\nimport(gridExtra)\nimport(ggpubr)\nimport(viridis)\nimport(Biostrings)\nimport(devtools)\nimport(reshape2)\nimport(ggplot2)\nimport(knitr)\nimport(rtracklayer)\nimport(GenomicAlignments)\nimport(BSgenome)\nimport(GenomicFiles)\nimport(BiocGenerics)",file =   "/bfd/lcalviel/Ribo-seQC/Ribo-seQC_Dec2018/RiboseQC/NAMESPACE",append = T)
install()
build()
