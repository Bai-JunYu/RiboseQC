"release_name: NA","\n",
"source_url: NA","\n",
"organism_biocview: ", scientific_name,"\n",
"BSgenomeObjname: ",scientific_name,"\n",
"seqs_srcdir: ",dirname(twobit_file),"\n",
"seqfile_name: ",basename(twobit_file),sep="")
seed_dest<-paste(annotation_directory,"/",basename(twobit_file),"_",scientific_name,"_seed",sep = "")
seed_dest
circseed
circseed<-paste('c("',paste(circseed,collapse=","),'")',sep="")
circseed<-gsub(circseed,pattern = ",",replacement='","')
cat(seed_text,"\n","circ_seqs: ",circseed,"\n",sep="",file = seed_dest)
unlink(paste(annotation_directory,pkgnm,sep="/"),recursive=T)
forgeBSgenomeDataPkg(x=seed_dest,destdir=annotation_directory,seqs_srcdir=dirname(twobit_file))
cat(paste("Creating the BSgenome package --- Done! ",date(),"\n",sep = ""))
cat(paste("Installing the BSgenome package ... ",date(),"\n",sep = ""))
install(paste(annotation_directory,pkgnm,sep="/"))
cat(paste("Installing the BSgenome package --- Done! ",date(),"\n",sep = ""))
if(forge_BSgenome){
cat(paste("Creating the BSgenome package ... ",date(),"\n",sep = ""))
seed_text<-paste("Package: BSgenome.",scientific_name,".",annotation_name,"\n",
"Title: Full genome sequences for ",scientific_name,", ",annotation_name,"\n",
"Description: Full genome sequences for ",scientific_name,", ",annotation_name,"\n",
"Version: 1.0","\n",
"organism: ",scientific_name,"\n",
"common_name: ",scientific_name,"\n",
"provider: NA","\n",
"provider_version: ",annotation_name,"\n",
"release_date: NA","\n",
"release_name: NA","\n",
"source_url: NA","\n",
"organism_biocview: ", scientific_name,"\n",
"BSgenomeObjname: ",scientific_name,"\n",
"seqs_srcdir: ",dirname(twobit_file),"\n",
"seqfile_name: ",basename(twobit_file),sep="")
seed_dest<-paste(annotation_directory,"/",basename(twobit_file),"_",scientific_name,"_seed",sep = "")
if(length(circseed)==1){
seed_text<-paste(seed_text,"\n",
"circ_seqs: \"",circseed,"\"",sep="")
writeLines(text = seed_text,con = seed_dest)
}
if(length(circseed)>1){
circseed<-paste('c("',paste(circseed,collapse=","),'")',sep="")
circseed<-gsub(circseed,pattern = ",",replacement='","')
cat(seed_text,"\n","circ_seqs: ",circseed,"\n",sep="",file = seed_dest)
}
unlink(paste(annotation_directory,pkgnm,sep="/"),recursive=T)
forgeBSgenomeDataPkg(x=seed_dest,destdir=annotation_directory,seqs_srcdir=dirname(twobit_file))
cat(paste("Creating the BSgenome package --- Done! ",date(),"\n",sep = ""))
cat(paste("Installing the BSgenome package ... ",date(),"\n",sep = ""))
install(paste(annotation_directory,pkgnm,sep="/"))
cat(paste("Installing the BSgenome package --- Done! ",date(),"\n",sep = ""))
}
if(create_TxDb){
cat(paste("Creating the TxDb object ... ",date(),"\n",sep = ""))
annotation<-makeTxDbFromGFF(file=gtf_file,format="gtf",chrominfo = seqinfotwob)
saveDb(annotation, file=paste(annotation_directory,"/",basename(gtf_file),"_TxDb",sep=""))
cat(paste("Creating the TxDb object --- Done! ",date(),"\n",sep = ""))
cat(paste("Extracting genomic regions ... ",date(),"\n",sep = ""))
genes<-genes(annotation)
exons_ge<-exonsBy(annotation,by="gene")
exons_ge<-reduce(exons_ge)
cds_gen<-cdsBy(annotation,"gene")
cds_ge<-reduce(cds_gen)
#define regions not overlapping CDS ( or exons when defining introns)
threeutrs<-reduce(GenomicRanges::setdiff(unlist(threeUTRsByTranscript(annotation)),unlist(cds_ge),ignore.strand=FALSE))
fiveutrs<-reduce(GenomicRanges::setdiff(unlist(fiveUTRsByTranscript(annotation)),unlist(cds_ge),ignore.strand=FALSE))
introns<-reduce(GenomicRanges::setdiff(unlist(intronsByTranscript(annotation)),unlist(exons_ge),ignore.strand=FALSE))
nc_exons<-reduce(GenomicRanges::setdiff(unlist(exons_ge),reduce(c(unlist(cds_ge),fiveutrs,threeutrs)),ignore.strand=FALSE))
#assign gene ids (mutiple when overlapping multiple genes)
ov<-findOverlaps(threeutrs,genes)
ov<-split(subjectHits(ov),queryHits(ov))
threeutrs$gene_id<-CharacterList(lapply(ov,FUN = function(x){names(genes)[x]}))
ov<-findOverlaps(fiveutrs,genes)
ov<-split(subjectHits(ov),queryHits(ov))
fiveutrs$gene_id<-CharacterList(lapply(ov,FUN = function(x){names(genes)[x]}))
ov<-findOverlaps(introns,genes)
ov<-split(subjectHits(ov),queryHits(ov))
introns$gene_id<-CharacterList(lapply(ov,FUN = function(x){names(genes)[x]}))
ov<-findOverlaps(nc_exons,genes)
ov<-split(subjectHits(ov),queryHits(ov))
nc_exons$gene_id<-CharacterList(lapply(ov,FUN = function(x){names(genes)[x]}))
intergenicRegions<-genes
strand(intergenicRegions)<-"*"
intergenicRegions <- gaps(reduce(intergenicRegions))
intergenicRegions<-intergenicRegions[strand(intergenicRegions)=="*"]
cds_tx<-cdsBy(annotation,"tx",use.names=T)
txs_gene<-transcriptsBy(annotation,by="gene")
genes_red<-reduce(sort(genes(annotation)))
exons_tx<-exonsBy(annotation,"tx",use.names=T)
transcripts_db<-transcripts(annotation)
intron_names_tx<-intronsByTranscript(annotation,use.names=T)
#define exonic bins, including regions overlapping multiple genes
nsns<-disjointExons(annotation,aggregateGenes=T)
#define tx_coordinates of ORF boundaries
exsss_cds<-exons_tx[names(cds_tx)]
chunks<-seq(1,length(cds_tx),by = 20000)
if(chunks[length(chunks)]<length(cds_tx)){chunks<-c(chunks,length(cds_tx))}
mapp<-GRangesList()
for(i in 1:(length(chunks)-1)){
if(i!=(length(chunks)-1)){
mapp<-suppressWarnings(c(mapp,pmapToTranscripts(cds_tx[chunks[i]:(chunks[i+1]-1)],transcripts = exsss_cds[chunks[i]:(chunks[i+1]-1)])))
}
if(i==(length(chunks)-1)){
mapp<-suppressWarnings(c(mapp,pmapToTranscripts(cds_tx[chunks[i]:(chunks[i+1])],transcripts = exsss_cds[chunks[i]:(chunks[i+1])])))
}
}
cds_txscoords<-unlist(mapp)
#extract biotypes and ids
cat(paste("Extracting ids and biotypes ... ",date(),"\n",sep = ""))
trann<-unique(mcols(import.gff2(gtf_file,colnames=c("gene_id","gene_biotype","gene_type","gene_name","gene_symbol","transcript_id","transcript_biotype","transcript_type"))))
trann<-trann[!is.na(trann$transcript_id),]
trann<-data.frame(unique(trann),stringsAsFactors=F)
if(sum(!is.na(trann$transcript_biotype))==0 & sum(!is.na(trann$transcript_type))==0 ){
trann$transcript_biotype<-"no_type"
}
if(sum(!is.na(trann$transcript_biotype))==0){trann$transcript_biotype<-NULL}
if(sum(!is.na(trann$transcript_type))==0){trann$transcript_type<-NULL}
if(sum(!is.na(trann$gene_biotype))==0 & sum(!is.na(trann$gene_type))==0 ){
trann$gene_type<-"no_type"
}
if(sum(!is.na(trann$gene_name))==0 & sum(!is.na(trann$gene_symbol))==0 ){
trann$gene_name<-"no_name"
}
if(sum(!is.na(trann$gene_biotype))==0){trann$gene_biotype<-NULL}
if(sum(!is.na(trann$gene_type))==0){trann$gene_type<-NULL}
if(sum(!is.na(trann$gene_name))==0){trann$gene_name<-NULL}
if(sum(!is.na(trann$gene_symbol))==0){trann$gene_symbol<-NULL}
colnames(trann)<-c("gene_id","gene_biotype","gene_name","transcript_id","transcript_biotype")
trann<-DataFrame(trann)
#introns and transcript_ids/gene_ids
unq_intr<-sort(unique(unlist(intron_names_tx)))
names(unq_intr)<-NULL
all_intr<-unlist(intron_names_tx)
ov<-findOverlaps(unq_intr,all_intr,type="equal")
ov<-split(subjectHits(ov),queryHits(ov))
a_nam<-CharacterList(lapply(ov,FUN = function(x){unique(names(all_intr)[x])}))
unq_intr$type="J"
unq_intr$tx_name<-a_nam
mat_genes<-match(unq_intr$tx_name,trann$transcript_id)
g<-unlist(apply(cbind(1:length(mat_genes),Y = elementNROWS(mat_genes)),FUN =function(x) rep(x[1],x[2]),MARGIN = 1))
g2<-split(trann[unlist(mat_genes),"gene_id"],g)
unq_intr$gene_id<-CharacterList(lapply(g2,unique))
#filter ncRNA and ncIsof regions
ncrnas<-nc_exons[!nc_exons%over%genes[trann$gene_id[trann$gene_biotype=="protein_coding"]]]
ncisof<-nc_exons[nc_exons%over%genes[trann$gene_id[trann$gene_biotype=="protein_coding"]]]
# define genetic codes to use
# IMPORTANT : modify if needed (e.g. different organelles or species) check ids of GENETIC_CODE_TABLE for more info
ifs<-seqinfo(annotation)
translations<-as.data.frame(ifs)
translations$genetic_code<-"1"
#insert new codes for chromosome name
#Mammalian mito
translations$genetic_code[rownames(translations)%in%c("chrM","MT","MtDNA","mit","mitochondrion")]<-"2"
#Yeast mito
translations$genetic_code[rownames(translations)%in%c("Mito")]<-"3"
#Drosophila mito
translations$genetic_code[rownames(translations)%in%c("dmel_mitochondrion_genome")]<-"5"
circs<-ifs@seqnames[which(ifs@is_circular)]
#define start and stop codons (genome space)
suppressPackageStartupMessages(library(pkgnm,character.only=TRUE))
genome<-get(pkgnm)
tocheck<-as.character(runValue(seqnames(cds_tx)))
tocheck<-cds_tx[!tocheck%in%circs]
seqcds<-extractTranscriptSeqs(genome,transcripts = tocheck)
cd<-unique(translations$genetic_code[!rownames(translations)%in%circs])
trsl<-suppressWarnings(translate(seqcds,genetic.code = getGeneticCode(cd),if.fuzzy.codon = "solve"))
trslend<-as.character(narrow(trsl,end = width(trsl),width = 1))
stop_inannot<-NA
if(names(sort(table(trslend),decreasing = T)[1])=="*"){stop_inannot<-"*"}
cds_txscoords$gene_id<-trann$gene_id[match(as.vector(seqnames(cds_txscoords)),trann$transcript_id)]
cds_cc<-cds_txscoords
strand(cds_cc)<-"*"
sta_cc<-resize(cds_cc,width = 1,"start")
sta_cc<-unlist(pmapFromTranscripts(sta_cc,exons_tx[seqnames(sta_cc)],ignore.strand=F))
sta_cc$gene_id<-trann$gene_id[match(names(sta_cc),trann$transcript_id)]
sta_cc<-sta_cc[sta_cc$hit]
strand(sta_cc)<-structure(as.vector(strand(transcripts_db)),names=transcripts_db$tx_name)[names(sta_cc)]
sta_cc$type<-"start_codon"
mcols(sta_cc)<-mcols(sta_cc)[,c("exon_rank","type","gene_id")]
sto_cc<-resize(cds_cc,width = 1,"end")
#stop codon is the 1st nt, e.g. U of the UAA
#To-do: update with regards to different organelles, and different annotations
sto_cc<-shift(sto_cc,-2)
if(is.na(stop_inannot)){sto_cc<-shift(sto_cc,3)}
sto_cc<-unlist(pmapFromTranscripts(sto_cc,exons_tx[seqnames(sto_cc)],ignore.strand=F))
sto_cc<-sto_cc[sto_cc$hit]
sto_cc$gene_id<-trann$gene_id[match(names(sto_cc),trann$transcript_id)]
strand(sto_cc)<-structure(as.vector(strand(transcripts_db)),names=transcripts_db$tx_name)[names(sto_cc)]
sto_cc$type<-"stop_codon"
mcols(sto_cc)<-mcols(sto_cc)[,c("exon_rank","type","gene_id")]
#define most common, most upstream/downstream
cat(paste("Defining most common start/stop codons ... ",date(),"\n",sep = ""))
start_stop_cc<-sort(c(sta_cc,sto_cc))
start_stop_cc$transcript_id<-names(start_stop_cc)
start_stop_cc$most_up_downstream<-FALSE
start_stop_cc$most_frequent<-FALSE
df<-cbind.DataFrame(start(start_stop_cc),start_stop_cc$type,start_stop_cc$gene_id)
colnames(df)<-c("start_pos","type","gene_id")
upst<-by(df$start_pos,INDICES = df$gene_id,function(x){x==min(x) | x==max(x)})
start_stop_cc$most_up_downstream<-unlist(upst[unique(df$gene_id)])
mostfr<-by(df[,c("start_pos","type")],INDICES = df$gene_id,function(x){
mfreq<-table(x)
x$start_pos%in%as.numeric(names(which(mfreq[,1]==max(mfreq[,1])))) | x$start_pos%in%as.numeric(names(which(mfreq[,2]==max(mfreq[,2]))))
})
start_stop_cc$most_frequent<-unlist(mostfr[unique(df$gene_id)])
names(start_stop_cc)<-NULL
#define transcripts as containing frequent start/stop codons or most upstream ones, in relation with 5'UTR length
mostupstr_tx<-sum(LogicalList(split(start_stop_cc$most_up_downstream,start_stop_cc$transcript_id)))[as.character(seqnames(cds_txscoords))]
cds_txscoords$upstr_stasto<-mostupstr_tx
mostfreq_tx<-sum(LogicalList(split(start_stop_cc$most_frequent,start_stop_cc$transcript_id)))[as.character(seqnames(cds_txscoords))]
cds_txscoords$mostfreq_stasto<-mostfreq_tx
cds_txscoords$lentx<-sum(width(exons_tx[as.character(seqnames(cds_txscoords))]))
df<-cbind.DataFrame(as.character(seqnames(cds_txscoords)),width(cds_txscoords),start(cds_txscoords),cds_txscoords$mostfreq_stasto,cds_txscoords$gene_id)
colnames(df)<-c("txid","cdslen","utr5len","var","gene_id")
repres_freq<-by(df[,c("txid","cdslen","utr5len","var")],df$gene_id,function(x){
x<-x[order(x$var,x$utr5len,x$cdslen,decreasing = T),]
x<-x[x$var==max(x$var),]
ok<-x$txid[which(x$cdslen==max(x$cdslen) & x$utr5len==max(x$utr5len) & x$var==max(x$var))][1]
if(length(ok)==0 | is.na(ok[1])){ok<-x$txid[1]}
ok
})
df<-cbind.DataFrame(as.character(seqnames(cds_txscoords)),width(cds_txscoords),start(cds_txscoords),cds_txscoords$upstr_stasto,cds_txscoords$gene_id)
colnames(df)<-c("txid","cdslen","utr5len","var","gene_id")
repres_upstr<-by(df[,c("txid","cdslen","utr5len","var")],df$gene_id,function(x){
x<-x[order(x$var,x$utr5len,x$utr5len,decreasing = T),]
x<-x[x$var==max(x$var),]
ok<-x$txid[which(x$cdslen==max(x$cdslen) & x$utr5len==max(x$utr5len) & x$var==max(x$var))][1]
if(length(ok)==0 | is.na(ok[1])){ok<-x$txid[1]}
ok
})
df<-cbind.DataFrame(as.character(seqnames(cds_txscoords)),width(cds_txscoords),start(cds_txscoords),cds_txscoords$upstr_stasto,cds_txscoords$gene_id)
colnames(df)<-c("txid","cdslen","utr5len","var","gene_id")
repres_len5<-by(df[,c("txid","cdslen","utr5len","var")],df$gene_id,function(x){
x<-x[order(x$utr5len,x$var,x$cdslen,decreasing = T),]
ok<-x$txid[which(x$utr5len==max(x$utr5len) & x$var==max(x$var))][1]
if(length(ok)==0 | is.na(ok[1])){ok<-x$txid[1]}
ok
})
cds_txscoords$reprentative_mostcommon<-as.character(seqnames(cds_txscoords))%in%unlist(repres_freq)
cds_txscoords$reprentative_boundaries<-as.character(seqnames(cds_txscoords))%in%unlist(repres_upstr)
cds_txscoords$reprentative_5len<-as.character(seqnames(cds_txscoords))%in%unlist(repres_len5)
unq_stst<-start_stop_cc
mcols(unq_stst)<-NULL
unq_stst<-sort(unique(unq_stst))
ov<-findOverlaps(unq_stst,start_stop_cc,type="equal")
ov<-split(subjectHits(ov),queryHits(ov))
unq_stst$type<-CharacterList(lapply(ov,FUN = function(x){unique(start_stop_cc$type[x])}))
unq_stst$transcript_id<-CharacterList(lapply(ov,FUN = function(x){start_stop_cc$transcript_id[x]}))
unq_stst$gene_id<-CharacterList(lapply(ov,FUN = function(x){unique(start_stop_cc$gene_id[x])}))
unq_stst$reprentative_mostcommon<-sum(!is.na(match(unq_stst$transcript_id,unlist(as(repres_freq,"CharacterList")))))>0
unq_stst$reprentative_boundaries<-sum(!is.na(match(unq_stst$transcript_id,unlist(as(repres_upstr,"CharacterList")))))>0
unq_stst$reprentative_5len<-sum(!is.na(match(unq_stst$transcript_id,unlist(as(repres_len5,"CharacterList")))))>0
#put in a list
GTF_annotation<-list(transcripts_db,txs_gene,ifs,unq_stst,cds_tx,intron_names_tx,cds_gen,exons_tx,nsns,unq_intr,genes,threeutrs,fiveutrs,ncisof,ncrnas,introns,intergenicRegions,trann,cds_txscoords,translations,pkgnm,stop_inannot)
names(GTF_annotation)<-c("txs","txs_gene","seqinfo","start_stop_codons","cds_txs","introns_txs","cds_genes","exons_txs","exons_bins","junctions","genes","threeutrs","fiveutrs","ncIsof","ncRNAs","introns","intergenicRegions","trann","cds_txs_coords","genetic_codes","genome_package","stop_in_gtf")
#Save as a RData object
save(GTF_annotation,file=paste(annotation_directory,"/",basename(gtf_file),"_Rannot",sep=""))
cat(paste("Rannot object created!   ",date(),"\n",sep = ""))
#create tables and bed files (with colnames, so with header)
if(export_bed_tables_TxDb==T){
cat(paste("Exporting annotation tables ... ",date(),"\n",sep = ""))
for(bed_file in c("fiveutrs","threeutrs","ncIsof","ncRNAs","introns","cds_txs_coords")){
bf<-GTF_annotation[[bed_file]]
bf_t<-data.frame(chromosome=seqnames(bf),start=start(bf),end=end(bf),name=".",score=width(bf),strand=strand(bf))
meccole<-mcols(bf)
for(mecc in names(meccole)){
if(is(meccole[,mecc],"CharacterList") | is(meccole[,mecc],"NumericList") | is(meccole[,mecc],"IntegerList")){
meccole[,mecc]<-paste(meccole[,mecc],collapse=";")
}
}
bf_t<-cbind.data.frame(bf_t,meccole)
write.table(bf_t,file = paste(annotation_directory,"/",bed_file,"_similbed.bed",sep=""),sep="\t",quote = FALSE,row.names = FALSE)
}
write.table(GTF_annotation$trann,file = paste(annotation_directory,"/table_gene_tx_IDs",sep=""),sep="\t",quote = FALSE,row.names = FALSE)
seqi<-as.data.frame(GTF_annotation$seqinfo)
seqi$chromosome<-rownames(seqi)
write.table(seqi,file = paste(annotation_directory,"/seqinfo",sep=""),sep="\t",quote = FALSE,row.names = FALSE)
gen_cod<-as.data.frame(GTF_annotation$genetic_codes)
gen_cod$chromosome<-rownames(gen_cod)
write.table(gen_cod,file = paste(annotation_directory,"/genetic_codes",sep=""),sep="\t",quote = FALSE,row.names = FALSE)
cat(paste("Exporting annotation tables --- Done! ",date(),"\n",sep = ""))
}
}
undebug(prepare_annotation_files)
options(error=recover)
prepare_annotation_files(output_dir,twobit_file,gtf_file,scientific_name = "Arabidopsis.thaliana", annotation_name = "tair10.42" )
file.remove('inst/extdata/example.2bit.seed')
prepare_annotation_files(output_dir,twobit_file,gtf_file,scientific_name = "Arabidopsis.thaliana", annotation_name = "tair10.42" )
output_dir
output_dir%>%list.files
prepare_annotation_files(output_dir,twobit_file,gtf_file,scientific_name = "Arabidopsis.thaliana", annotation_name = "tair10.42" )
prepare_annotation_files(output_dir,twobit_file,gtf_file,scientific_name = "Arabidopsis.thaliana", annotation_name = "tair10.42" )
prepare_annotation_files(output_dir,twobit_file,gtf_file,scientific_name = "Arabidopsis.thaliana", annotation_name = "tair10.42" )
output_dir%>%dir.create
prepare_annotation_files(output_dir,twobit_file,gtf_file,scientific_name = "Arabidopsis.thaliana", annotation_name = "tair10.42" )
DEFAULT_CIRC_SEQS <- unique(c("chrM","MT","MtDNA","mit","Mito","mitochondrion",
"dmel_mitochondrion_genome","Pltd","ChrC","Pt","chloroplast",
"Chloro","2micron","2-micron","2uM",
"Mt", "NC_001879.2", "NC_006581.1","ChrM"))
#adjust variable names (some chars not permitted)
annotation_name<-gsub(annotation_name,pattern = "_",replacement = "")
annotation_name<-gsub(annotation_name,pattern = "-",replacement = "")
if(!dir.exists(annotation_directory)){dir.create(path = annotation_directory,recursive = T)}
annotation_directory<-output_dir
DEFAULT_CIRC_SEQS <- unique(c("chrM","MT","MtDNA","mit","Mito","mitochondrion",
"dmel_mitochondrion_genome","Pltd","ChrC","Pt","chloroplast",
"Chloro","2micron","2-micron","2uM",
"Mt", "NC_001879.2", "NC_006581.1","ChrM"))
#adjust variable names (some chars not permitted)
annotation_name<-gsub(annotation_name,pattern = "_",replacement = "")
annotation_name<-gsub(annotation_name,pattern = "-",replacement = "")
scientific_name="Homo.sapiens"
DEFAULT_CIRC_SEQS <- unique(c("chrM","MT","MtDNA","mit","Mito","mitochondrion",
"dmel_mitochondrion_genome","Pltd","ChrC","Pt","chloroplast",
"Chloro","2micron","2-micron","2uM",
"Mt", "NC_001879.2", "NC_006581.1","ChrM"))
#adjust variable names (some chars not permitted)
annotation_name<-gsub(annotation_name,pattern = "_",replacement = "")
annotation_name<-gsub(annotation_name,pattern = "-",replacement = "")
annotation_name="genc25"
DEFAULT_CIRC_SEQS <- unique(c("chrM","MT","MtDNA","mit","Mito","mitochondrion",
"dmel_mitochondrion_genome","Pltd","ChrC","Pt","chloroplast",
"Chloro","2micron","2-micron","2uM",
"Mt", "NC_001879.2", "NC_006581.1","ChrM"))
#adjust variable names (some chars not permitted)
annotation_name<-gsub(annotation_name,pattern = "_",replacement = "")
annotation_name<-gsub(annotation_name,pattern = "-",replacement = "")
if(!dir.exists(annotation_directory)){dir.create(path = annotation_directory,recursive = T)}
annotation_directory<-normalizePath(annotation_directory)
twobit_file<-normalizePath(twobit_file)
gtf_file<-normalizePath(gtf_file)
for (f in c(twobit_file,gtf_file)){
if(file.access(f, 0)==-1) {
stop("
The following files don't exist:\n",
f, "\n")
}
}
scientific_name_spl<-strsplit(scientific_name,"[.]")[[1]]
ok<-length(scientific_name_spl)==2
if(!ok){stop("\"scientific_name\" must be two words separated by a \".\", like \"Homo.sapiens\"")}
seqinfotwob<-seqinfo(TwoBitFile(twobit_file))
circss<-seqnames(seqinfotwob)[which(seqnames(seqinfotwob)%in%DEFAULT_CIRC_SEQS)]
seqinfotwob@is_circular[which(seqnames(seqinfotwob)%in%DEFAULT_CIRC_SEQS)]<-TRUE
pkgnm<-paste("BSgenome",scientific_name,annotation_name,sep=".")
circseed<-circss
if(length(circseed)==0){circseed<-NULL}
if(forge_BSgenome){
cat(paste("Creating the BSgenome package ... ",date(),"\n",sep = ""))
seed_text<-paste("Package: BSgenome.",scientific_name,".",annotation_name,"\n",
"Title: Full genome sequences for ",scientific_name,", ",annotation_name,"\n",
"Description: Full genome sequences for ",scientific_name,", ",annotation_name,"\n",
"Version: 1.0","\n",
"organism: ",scientific_name,"\n",
"common_name: ",scientific_name,"\n",
"provider: NA","\n",
"provider_version: ",annotation_name,"\n",
"release_date: NA","\n",
"release_name: NA","\n",
"source_url: NA","\n",
"organism_biocview: ", scientific_name,"\n",
"BSgenomeObjname: ",scientific_name,"\n",
"seqs_srcdir: ",dirname(twobit_file),"\n",
"seqfile_name: ",basename(twobit_file),sep="")
seed_dest<-paste(annotation_directory,"/",basename(twobit_file),"_",scientific_name,"_seed",sep = "")
if(length(circseed)==1){
seed_text<-paste(seed_text,"\n",
"circ_seqs: \"",circseed,"\"",sep="")
writeLines(text = seed_text,con = seed_dest)
}
if(length(circseed)>1){
circseed<-paste('c("',paste(circseed,collapse=","),'")',sep="")
circseed<-gsub(circseed,pattern = ",",replacement='","')
cat(seed_text,"\n","circ_seqs: ",circseed,"\n",sep="",file = seed_dest)
}
unlink(paste(annotation_directory,pkgnm,sep="/"),recursive=T)
forgeBSgenomeDataPkg(x=seed_dest,destdir=annotation_directory,seqs_srcdir=dirname(twobit_file))
cat(paste("Creating the BSgenome package --- Done! ",date(),"\n",sep = ""))
cat(paste("Installing the BSgenome package ... ",date(),"\n",sep = ""))
install(paste(annotation_directory,pkgnm,sep="/"))
cat(paste("Installing the BSgenome package --- Done! ",date(),"\n",sep = ""))
}
forge_BSgenome
forge_BSgenome=T
cat(paste("Creating the BSgenome package ... ",date(),"\n",sep = ""))
seed_text<-paste("Package: BSgenome.",scientific_name,".",annotation_name,"\n",
"Title: Full genome sequences for ",scientific_name,", ",annotation_name,"\n",
"Description: Full genome sequences for ",scientific_name,", ",annotation_name,"\n",
"Version: 1.0","\n",
"organism: ",scientific_name,"\n",
"common_name: ",scientific_name,"\n",
"provider: NA","\n",
"provider_version: ",annotation_name,"\n",
"release_date: NA","\n",
"release_name: NA","\n",
"source_url: NA","\n",
"organism_biocview: ", scientific_name,"\n",
"BSgenomeObjname: ",scientific_name,"\n",
"seqs_srcdir: ",dirname(twobit_file),"\n",
"seqfile_name: ",basename(twobit_file),sep="")
seed_dest<-paste(annotation_directory,"/",basename(twobit_file),"_",scientific_name,"_seed",sep = "")
list.files(output_dir)
unlink(paste(annotation_directory,pkgnm,sep="/"),recursive=T)
forgeBSgenomeDataPkg(x=seed_dest,destdir=annotation_directory,seqs_srcdir=dirname(twobit_file))
source('~/projects/RiboseQC/R/riboseqc.R')
prepare_annotation_files(output_dir,twobit_file,gtf_file,scientific_name = "Arabidopsis.thaliana", annotation_name = "tair10.42" )
gtf_file
library(RiboseQC)
prepare_annotation_files(output_dir,twobit_file,gtf_file,scientific_name = "Arabidopsis.thaliana", annotation_name = "tair10.42" )
gtf_file
gtf_file
devtools::load_all(".")
prepare_annotation_files(output_dir,twobit_file,gtf_file,scientific_name = "Arabidopsis.thaliana", annotation_name = "tair10.42" )
prepare_annotation_files(output_dir,twobit_file,gtf_file,scientific_name = "Arabidopsis.thaliana", annotation_name = "tair10.42" )
library(RiboseQC)
prepare_annotation_files(output_dir,twobit_file,gtf_file,scientific_name = "Arabidopsis.thaliana", annotation_name = "tair10.42" )
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
prepare_annotation_files(output_dir,twobit_file,gtf_file,scientific_name = "Arabidopsis.thaliana", annotation_name = "tair10.42" )
?RiboseQC_analysis()
output_dir%>%list.files
annotation_file <- paste0(gtf_file,'_Rannot')
stopifnot(file.exists(annotation_file))
annotation_file <- paste0(gtf_file,'_Rannot')
annotation_file
stopifnot(file.exists(annotation_file))
output_dir%>%list.files
annotation_file <- file.path(output_dir,paste0(basename(gtf_file),'_Rannot'))
stopifnot(file.exists(annotation_file))
output_dir%>%list.files
bam_file <- system.file('extdata','example.bam')
RiboseQC_analysis(annotation_file = annotation_file,bam_files = bam_file)
bam_file
RiboseQC_analysis(annotation_file = annotation_file,
bam_files = bam_file,
fast_mode = TRUE
)
bam_file <- system.file('extdata','example.bam',
package='RiboseQC',mustWork = TRUE)
RiboseQC_analysis(annotation_file = annotation_file,
bam_files = bam_file,
fast_mode = TRUE
)
dirname(bam_file)
dirname(bam_file)%>%list.files
prepare_annotation_file
prepare_annotation_file
prepare_annotation_file
prepare_annotation_file
prepare_annotation_file
prepare_annotation_file
prepare_annotation_files
prepare_annotation_files
restart()
load('~/rdebug')
ls()
library(RiboseQC)
bam_file <- system.file('extdata','example.bam',
package='RiboseQC',mustWork = TRUE)
RiboseQC_analysis(annotation_file = annotation_file,
bam_files = bam_file,
fast_mode = TRUE
)
gtf_file <- system.file("extdata", "example.gtf",
package = "RiboseQC",mustWork = TRUE)
twobit_file <- system.file("extdata", "example.2bit",
package = "RiboseQC",mustWork = TRUE)
output_dir <- tempdir()
prepare_annotation_files(output_dir,twobit_file,gtf_file,
scientific_name = "Arabidopsis.thaliana",
annotation_name = "tair10.42" )
bam_file <- system.file('extdata','example.bam',
package='RiboseQC',mustWork = TRUE)
RiboseQC_analysis(annotation_file = annotation_file,
bam_files = bam_file,
fast_mode = TRUE
)
annotation_file <- file.path(output_dir,paste0(basename(gtf_file),'_Rannot'))
stopifnot(file.exists(annotation_file))
output_dir%>%list.files
# save.image('~/rdebug')
# stop()
bam_file <- system.file('extdata','example.bam',
package='RiboseQC',mustWork = TRUE)
RiboseQC_analysis(annotation_file = annotation_file,
bam_files = bam_file,
fast_mode = TRUE
)
rmarkdown::render('vignettes/riboseqc_analysis.Rmd')
RiboseQC_analysis(annotation_file = annotation_file,
bam_files = bam_file,
fast_mode = TRUE,
create_report = FALSE )
BiocCheck::BiocCheck()
library(RiboseQC)
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
# save.image('~/rdebug')
# stop()
bam_file <- system.file('extdata','example.bam',
package='RiboseQC',mustWork = TRUE)
suppressPackageStartupMessages(library("RiboseQC"))
download.file("https://drive.google.com/uc?export=download&id=1n6UA5cSz6djx0dY_7sI57177T-kyZhhT",destfile = "test_human.2bit")
download.file("https://drive.google.com/uc?export=download&id=19Am9-iMEyB-AcIsVRdIqrF-BVdQYrcaI",destfile = "test_human.gtf")
prepare_annotation_files(annotation_directory = ".",
twobit_file = "test_human.2bit",
gtf_file = "test_human.gtf",scientific_name = "Human.test",
annotation_name = "genc25_22M",export_bed_tables_TxDb = F,forge_BSgenome = T,create_TxDb = T)
download.file("https://drive.google.com/uc?export=download&id=11PP5y2QH7si81rbEBJsOB-Lt3l_JowRW",destfile = "test_human_hek.bam")
