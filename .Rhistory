(1:10)%>%{x=(.+5)%%7;message(paste(x,collapse= ' '))}
(1:5)%>%{x=(.+4)%%5;message(paste(x,collapse= ' '))}
(1:5)%>%{x=(.+4)%%3;message(paste(x,collapse= ' '))}
(1:5)%>%{x=(.+4)%%5;message(paste(x,collapse= ' '))}
(1:5)%>%{x=(.+4)%%3;message(paste(x,collapse= ' '))}
(1:5)%>%{x=(.+4)%%5;message(paste(x,collapse= ' '))}
(1:5)%>%{x=(.+4)%%3;message(paste(x,collapse= ' '))}
source('~/.active-rstudio-document', echo=TRUE)
traceback()
source('~/.active-rstudio-document', echo=TRUE,v=T)
suppressPackageStartupMessages(library("RiboseQC"))
example(RiboseQC::calc_cutoffs_from_profiles
)
example(RiboseQC::calc_cutoffs_from_profiles)
example(calc_cutoffs_from_profiles)
help("calc_cutoffs_from_profiles")
data(profiles_fivepr)
calc_cutoffs_from_profiles(profiles_fivepr[["five_prime_subcodon"]][[1]][[1]],length_max = 100)
get_ps_fromspliceplus
suppressPackageStartupMessages(library("RiboseQC"))
prepare_annotation_files(annotation_directory = ".",
twobit_file = "test_human.2bit",
gtf_file = "test_human.gtf",scientific_name = "Human.test",
annotation_name = "genc25_22M",export_bed_tables_TxDb = F,forge_BSgenome = T,create_TxDb = T)
download.file("https://drive.google.com/uc?export=download&id=1n6UA5cSz6djx0dY_7sI57177T-kyZhhT",destfile = "test_human.2bit")
download.file("https://drive.google.com/uc?export=download&id=1n6UA5cSz6djx0dY_7sI57177T-kyZhhT",destfile = "test_human.2bit")
download.file("https://drive.google.com/uc?export=download&id=19Am9-iMEyB-AcIsVRdIqrF-BVdQYrcaI",destfile = "test_human.gtf")
prepare_annotation_files(annotation_directory = ".",
twobit_file = "test_human.2bit",
gtf_file = "test_human.gtf",scientific_name = "Human.test",
annotation_name = "genc25_22M",export_bed_tables_TxDb = F,forge_BSgenome = T,create_TxDb = T)
load_annotation("test_human.gtf_Rannot")
genome_seq[["chr22"]]
genome_seq[["chr22"]]
genome_seq[["chrM"]]
download.file("https://drive.google.com/uc?export=download&id=11PP5y2QH7si81rbEBJsOB-Lt3l_JowRW",destfile = "test_human_hek.bam")
RiboseQC_analysis(annotation_file="test_human.gtf_Rannot",bam_files = "test_human_hek.bam",report_file = "test_human_hek.html",write_tmp_files = F)
RiboseQC_analysis
body(RiboseQC_analysis)
capture.output(body(RiboseQC_analysis))
capture.output(body(RiboseQC_analysis))%>%Head
capture.output(body(RiboseQC_analysis))%>%gead
capture.output(body(RiboseQC_analysis))%>%head
capture.output(body(RiboseQC_analysis))%>%head(20)
capture.output(body(RiboseQC_analysis))%>%head(20)
capture.output(body(RiboseQC_analysis))%>%head(20)
capture.output(body(RiboseQC_analysis))%>%head(20)
capture.output(body(RiboseQC_analysis))
capture.output(body(RiboseQC_analysis))%>%head
library(RiboseQC)
body(RiboseQC_analysis)
body(RiboseQC_analysis)%>%head
capture.output(body(RiboseQC_analysis))%>%head
RiboseQC_analysis(annotation_file="test_human.gtf_Rannot",bam_files = "test_human_hek.bam",report_file = "test_human_hek.html",write_tmp_files = F)
remove.packages('Ribose.QC')
installed.packages('ribo')
installed.packages('Ribo')
installed.packages()
installed.packages()%>%.[[1]]
installed.packages()%>%.[,1]
installed.packages()%>%.[,1]%>%str_subset('ibo')
installed.packages()%>%.[,1]%>%str_subset('ibo')
library(stringr)
installed.packages()%>%.[,1]%>%str_subset('ibo')
remove.packages('Ribo.seQC')
BiocManager::install('BiocStyle')
getwd()
getwd()
getwd('test_human_hek.html_plots/rds/sample1_nucl_4_profiles_P_sites_metagene_subcodon_all')
RiboseQC_analysis(annotation_file="test_human.gtf_Rannot",bam_files = "test_human_hek.bam",report_file = "test_human_hek.html",write_tmp_files = F)
library(RiboseQC)
RiboseQC_analysis(annotation_file="test_human.gtf_Rannot",bam_files = "test_human_hek.bam",report_file = "test_human_hek.html",write_tmp_files = F)
as_ggplot(readRDS("test_root_shoots.html_plots/rds/shoots_ChrC_7_codonusage_positional_A-sites_per_codon_all_zscore")[[1]])
as_ggplot(readRDS("test_root_shoots.html_plots/rds/shoots_ChrC_7_codonusage_positional_A-sites_per_codon_all_zscore")[[1]])
RiboseQC_analysis(annotation_file="test_human.gtf_Rannot",bam_files = "test_human_hek.bam",report_file = "test_human_hek.html",write_tmp_files = F)
readRDS("test_human_hek.html_plots/rds/sample1_nucl_4_profiles_P_sites_metagene_subcodon_all")[[1]]
RiboseQC_analysis()
RiboseQC_analysis
generate_rdata_list('test_human_hek.bam_results_RiboseQC')
test_human_hek.bam_results_RiboseQC
generate_rdata_list('test_human_hek.bam_results_RiboseQC')
generate_rdata_list(list('test_human_hek.bam_results_RiboseQC'))
generate_rdata_list
load('test_human_hek.bam_results_RiboseQC')
res_all%>%names
res_all$P_sites_stats
res_all$selection_cutoffs
res_all$selection_cutoffs%>%names
res_all$results_choice
res_all$results_cutoffs
res_all$analysis_frame_cutoff
list.files(patt='selection')
list.files(.,patt='selection')
list.files('.'\,patt='selection')
list.files('.',patt='selection')
load()
source('~/projects/RiboseQC/R/riboseq_analysis.R')
readRDS("test_human_hek.html_plots/rds/sample1_nucl_4_profiles_P_sites_metagene_subcodon_all")[[1]]
RiboseQC_analysis(annotation_file="test_human.gtf_Rannot",bam_files = "test_human_hek.bam",report_file = "test_human_hek.html",write_tmp_files = F)
library(RiboseQC)
body(RiboseQC_analysis)
body(RiboseQC_analysis)%>%head
body(RiboseQC_analysis)%>%capture.output()
body(RiboseQC_analysis)%>%capture.output()%>%head
RiboseQC_analysis(annotation_file="test_human.gtf_Rannot",bam_files = "test_human_hek.bam",report_file = "test_human_hek.html",write_tmp_files = F)
RiboseQC_analysis(annotation_file="test_human.gtf_Rannot",bam_files = "test_human_hek.bam",report_file = "test_human_hek.html",write_tmp_files = F)
restart()
suppressPackageStartupMessages(library("RiboseQC"))
body(RiboseQC_analysis)%>%capture.output()%>%head
RiboseQC_analysis(annotation_file="test_human.gtf_Rannot",bam_files = "test_human_hek.bam",report_file = "test_human_hek.html",write_tmp_files = F)
res_rls
res_rls
cat(paste("Calculating P-sites offsets --- Done!", date(),"\n"))
selection_cutoffs<-list(res_rls,summary_res,list_cutoff)
names(selection_cutoffs)<-c("results_choice","results_cutoffs","analysis_frame_cutoff")
save(selection_cutoffs,file = paste(dira,"selection_cutoffs",sep = "/"))
dira
param <- ScanBamParam(flag=scanBamFlag(isDuplicate=FALSE,isSecondaryAlignment=FALSE),what=c("mapq"),tag = "MD")
seqllll<-seqlevels(unlist(unlist(read_stats$reads_pos1)))
seqleee<-seqlengths(unlist(unlist(read_stats$reads_pos1)))
rl_cutoffs_comp<-lapply(res_rls, function(x){x$final_choice})
#rescue all read lengths
if(rescue_all_rls[bammo]==TRUE){
all_rlsss<-as.numeric(names(read_stats$reads_pos1))
for(rilo in c("nucl",circs)){
ralo<-rl_cutoffs_comp[[rilo]]
if(is.null(ralo)){ralo<-DataFrame()}
rlno2<-all_rlsss[!all_rlsss%in%ralo$read_length]
ralo2<-DataFrame(read_length=rlno2,cutoff=12)
rl_cutoffs_comp[[rilo]]<-rbind(ralo,ralo2)
}
}
#what to do with chunks: x present chunk, y old chunks (cumulative)
reduc<-function(x,y){
#adjust merging by rls
all_ps<-GRangesList()
rls<-unique(c(names(x[["P_sites_all"]]),names(y[["P_sites_all"]])))
for(rl in rls){
reads_x<-GRanges()
reads_y<-GRanges()
seqlevels(reads_x)<-seqllll
seqlevels(reads_y)<-seqllll
seqlengths(reads_x)<-seqleee
seqlengths(reads_y)<-seqleee
if(sum(rl%in%names(x[["P_sites_all"]]))>0){reads_x<-x[["P_sites_all"]][[rl]]}
if(sum(rl%in%names(y[["P_sites_all"]]))>0){reads_y<-y[["P_sites_all"]][[rl]]}
plx<-reads_x[strand(reads_x)=="+"]
mnx<-reads_x[strand(reads_x)=="-"]
ply<-reads_y[strand(reads_y)=="+"]
mny<-reads_y[strand(reads_y)=="-"]
if(length(plx)>0){covv_pl<-coverage(plx,weight = plx$score)}else{covv_pl<-coverage(plx)}
if(length(ply)>0){covv_pl<-covv_pl+coverage(ply,weight = ply$score)}
covv_pl<-GRanges(covv_pl)
covv_pl<-covv_pl[covv_pl$score>0]
if(length(mnx)>0){covv_min<-coverage(mnx,weight = mnx$score)}else{covv_min<-coverage(mnx)}
if(length(mny)>0){covv_min<-covv_min+coverage(mny,weight = mny$score)}
covv_min<-GRanges(covv_min)
covv_min<-covv_min[covv_min$score>0]
strand(covv_pl)<-"+"
strand(covv_min)<-"-"
all_ps[[rl]]<-sort(c(covv_pl,covv_min))
}
uniq_ps<-GRangesList()
rls<-unique(c(names(x[["P_sites_uniq"]]),names(y[["P_sites_uniq"]])))
for(rl in rls){
reads_x<-GRanges()
reads_y<-GRanges()
seqlevels(reads_x)<-seqllll
seqlevels(reads_y)<-seqllll
seqlengths(reads_x)<-seqleee
seqlengths(reads_y)<-seqleee
if(sum(rl%in%names(x[["P_sites_uniq"]]))>0){reads_x<-x[["P_sites_uniq"]][[rl]]}
if(sum(rl%in%names(y[["P_sites_uniq"]]))>0){reads_y<-y[["P_sites_uniq"]][[rl]]}
plx<-reads_x[strand(reads_x)=="+"]
mnx<-reads_x[strand(reads_x)=="-"]
ply<-reads_y[strand(reads_y)=="+"]
mny<-reads_y[strand(reads_y)=="-"]
if(length(plx)>0){covv_pl<-coverage(plx,weight = plx$score)}else{covv_pl<-coverage(plx)}
if(length(ply)>0){covv_pl<-covv_pl+coverage(ply,weight = ply$score)}
covv_pl<-GRanges(covv_pl)
covv_pl<-covv_pl[covv_pl$score>0]
if(length(mnx)>0){covv_min<-coverage(mnx,weight = mnx$score)}else{covv_min<-coverage(mnx)}
if(length(mny)>0){covv_min<-covv_min+coverage(mny,weight = mny$score)}
covv_min<-GRanges(covv_min)
covv_min<-covv_min[covv_min$score>0]
strand(covv_pl)<-"+"
strand(covv_min)<-"-"
uniq_ps[[rl]]<-sort(c(covv_pl,covv_min))
}
uniq_mm_ps<-GRangesList()
rls<-unique(c(names(x[["P_sites_uniq_mm"]]),names(y[["P_sites_uniq_mm"]])))
for(rl in rls){
reads_x<-GRanges()
reads_y<-GRanges()
seqlevels(reads_x)<-seqllll
seqlevels(reads_y)<-seqllll
seqlengths(reads_x)<-seqleee
seqlengths(reads_y)<-seqleee
if(sum(rl%in%names(x[["P_sites_uniq_mm"]]))>0){reads_x<-x[["P_sites_uniq_mm"]][[rl]]}
if(sum(rl%in%names(y[["P_sites_uniq_mm"]]))>0){reads_y<-y[["P_sites_uniq_mm"]][[rl]]}
plx<-reads_x[strand(reads_x)=="+"]
mnx<-reads_x[strand(reads_x)=="-"]
ply<-reads_y[strand(reads_y)=="+"]
mny<-reads_y[strand(reads_y)=="-"]
if(length(plx)>0){covv_pl<-coverage(plx,weight = plx$score)}else{covv_pl<-coverage(plx)}
if(length(ply)>0){covv_pl<-covv_pl+coverage(ply,weight = ply$score)}
covv_pl<-GRanges(covv_pl)
covv_pl<-covv_pl[covv_pl$score>0]
if(length(mnx)>0){covv_min<-coverage(mnx,weight = mnx$score)}else{covv_min<-coverage(mnx)}
if(length(mny)>0){covv_min<-covv_min+coverage(mny,weight = mny$score)}
covv_min<-GRanges(covv_min)
covv_min<-covv_min[covv_min$score>0]
strand(covv_pl)<-"+"
strand(covv_min)<-"-"
uniq_mm_ps[[rl]]<-sort(c(covv_pl,covv_min))
}
covall_plus<-x$coverage_all_plus+y$coverage_all_plus
covall_min<-x$coverage_all_min+y$coverage_all_min
covuni_plus<-x$coverage_uniq_plus+y$coverage_uniq_plus
covuni_min<-x$coverage_uniq_min+y$coverage_uniq_min
rang_jun<-x$junctions
rang_jun$reads<-rang_jun$reads+y$junctions$reads
rang_jun$unique_reads<-rang_jun$unique_reads+y$junctions$unique_reads
list_res<-list(all_ps,uniq_ps,uniq_mm_ps,rang_jun,covall_plus,covall_min,covuni_plus,covuni_min)
names(list_res)<-c("P_sites_all","P_sites_uniq","P_sites_uniq_mm","junctions","coverage_all_plus","coverage_all_min","coverage_uniq_plus","coverage_uniq_min")
return(list_res)
}
yiel<-function(x){
readGAlignments(x,param = param)
}
mapp<-function(x){
x_I<-x[grep("I",cigar(x))]
if(length(x_I)>0){
x<-x[grep("I",cigar(x),invert=TRUE)]
}
x_D<-x[grep("D",cigar(x))]
if(length(x_D)>0){
x<-x[grep("D",cigar(x),invert=TRUE)]
}
# softclipping
clipp <- width(cigarRangesAlongQuerySpace(x@cigar, ops="S"))
clipp[elementNROWS(clipp)==0] <- 0
len_adj <- qwidth(x)-sum(clipp)
mcols(x)$len_adj <- len_adj
# Remove S from Cigar (read positions/length are already adjusted)
# it helps calculating P-sites positions for spliced reads
cigg<-cigar(x)
cigg_s<-grep(cigg,pattern = "S")
if(length(cigg_s)>0){
cigs<-cigg[cigg_s]
cigs<-gsub(cigs,pattern = "^[0-9]+S",replacement = "")
cigs<-gsub(cigs,pattern = "[0-9]+S$",replacement = "")
cigg[cigg_s]<-cigs
x@cigar<-cigg
}
mcols(x)$cigar_str<-x@cigar
x_uniq<-x[x@elementMetadata$mapq>50]
pos<-x[strand(x)=="+"]
neg<-x[strand(x)=="-"]
uniq_pos<-x_uniq[strand(x_uniq)=="+"]
uniq_neg<-x_uniq[strand(x_uniq)=="-"]
# coverage
covuni_plus<-coverage(uniq_pos)
covuni_min<-coverage(uniq_neg)
covall_plus<-coverage(pos)
covall_min<-coverage(neg)
# junctions
juns<-summarizeJunctions(x)
juns_pos<-juns
juns_neg<-juns
mcols(juns_pos)<-NULL
mcols(juns_neg)<-NULL
juns_pos$reads<-juns$plus_score
juns_neg$reads<-juns$minus_score
strand(juns_pos)<-"+"
strand(juns_neg)<-"-"
juns<-sort(c(juns_pos,juns_neg))
juns<-juns[juns$reads>0]
uniq_juns<-summarizeJunctions(x_uniq)
uniq_juns_pos<-uniq_juns
uniq_juns_neg<-uniq_juns
mcols(uniq_juns_pos)<-NULL
mcols(uniq_juns_neg)<-NULL
uniq_juns_pos$reads<-uniq_juns$plus_score
uniq_juns_neg$reads<-uniq_juns$minus_score
strand(uniq_juns_pos)<-"+"
strand(uniq_juns_neg)<-"-"
uniq_juns<-sort(c(uniq_juns_pos,uniq_juns_neg))
uniq_juns<-uniq_juns[uniq_juns$reads>0]
if(length(juns)>0){
juns$unique_reads<-0
mat<-match(uniq_juns,juns)
juns$unique_reads[mat]<-uniq_juns$reads
}
rang_jun<-GTF_annotation$junctions
rang_jun$reads<-0
rang_jun$unique_reads<-0
if(length(juns)>0){
mat<-match(juns,rang_jun)
juns<-juns[!is.na(mat)]
mat<-mat[!is.na(mat)]
rang_jun$reads[mat]<-juns$reads
rang_jun$unique_reads[mat]<-juns$unique_reads
}
# P-sites calculation
list_pss<-list()
for(comp in names(rl_cutoffs_comp)){
all_rl_ps<-GRangesList()
uniq_rl_ps<-GRangesList()
uniq_rl_mm_ps<-GRangesList()
seqlevels(all_rl_ps)<-seqllll
seqlevels(uniq_rl_ps)<-seqllll
seqlevels(uniq_rl_mm_ps)<-seqllll
seqlengths(all_rl_ps)<-seqleee
seqlengths(uniq_rl_ps)<-seqleee
seqlengths(uniq_rl_mm_ps)<-seqleee
chroms<-comp
if(comp=="nucl"){chroms=seqlevels(x)[!seqlevels(x)%in%circs]}
resul<-rl_cutoffs_comp[[comp]]
for(i in seq_along(resul$read_length)){
all_ps<-GRangesList()
uniq_ps<-GRangesList()
uniq_mm_ps<-GRangesList()
seqlevels(all_ps)<-seqllll
seqlevels(uniq_ps)<-seqllll
seqlevels(uniq_mm_ps)<-seqllll
seqlengths(all_ps)<-seqleee
seqlengths(uniq_ps)<-seqleee
seqlengths(uniq_mm_ps)<-seqleee
rl<-as.numeric(resul$read_length[i])
ct<-as.numeric(resul$cutoff[i])
ok_reads<-pos[mcols(pos)$len_adj%in%rl]
ok_reads<-ok_reads[as.vector(seqnames(ok_reads))%in%chroms]
ps_plus<-GRanges()
seqlevels(ps_plus)<-seqllll
seqlengths(ps_plus)<-seqleee
ps_plus_uniq<-ps_plus
ps_plus_uniq_mm<-ps_plus
if(length(ok_reads)>0){
unspl<-ok_reads[grep(pattern="N",x=cigar(ok_reads),invert=TRUE)]
ps_unspl<-shift(resize(GRanges(unspl),width=1,fix="start"),shift=ct)
spl<-ok_reads[grep(pattern="N",x=cigar(ok_reads))]
firstb<-as.numeric(sapply(strsplit(cigar(spl),"M"),"[[",1))
lastb<-as.numeric(sapply(strsplit(cigar(spl),"M"),function(x){gsub(x[length(x)],pattern="^[^_]*N",replacement="")}))
firstok<-spl[firstb>ct]
firstok<-shift(resize(GRanges(firstok),width=1,fix="start"),shift=ct)
lastok<-spl[lastb>=rl-ct]
lastok<-shift(resize(GRanges(lastok),width=1,fix="end"),shift=-(rl-ct-1))
multi<-spl[firstb<=ct & lastb<rl-ct]
ps_spl<-GRanges()
seqlevels(ps_spl)<-seqllll
seqlengths(ps_spl)<-seqleee
if(length(multi)>0){
ps_spl<-get_ps_fromspliceplus(multi,cutoff=ct)
}
mcols(ps_unspl)<-NULL
mcols(firstok)<-NULL
mcols(lastok)<-NULL
mcols(ps_spl)<-NULL
seqlevels(firstok)<-seqllll
seqlevels(lastok)<-seqllll
seqlevels(ps_unspl)<-seqllll
seqlevels(ps_spl)<-seqllll
seqlengths(firstok)<-seqleee
seqlengths(lastok)<-seqleee
seqlengths(ps_unspl)<-seqleee
seqlengths(ps_spl)<-seqleee
ps_plus<-c(ps_unspl,firstok,lastok,ps_spl)
ps_plus_uniq<-ps_plus[mcols(ok_reads)$mapq>50]
ps_plus_uniq_mm<-ps_plus[mcols(ok_reads)$mapq>50 & nchar(mcols(ok_reads)$MD)>3]
}
ok_reads<-neg[mcols(neg)$len_adj%in%rl]
ok_reads<-ok_reads[as.vector(seqnames(ok_reads))%in%chroms]
ps_neg<-GRanges()
seqlevels(ps_neg)<-seqllll
seqlengths(ps_neg)<-seqleee
ps_neg_uniq<-ps_neg
ps_neg_uniq_mm<-ps_neg
if(length(ok_reads)>0){
unspl<-ok_reads[grep(pattern="N",x=cigar(ok_reads),invert=TRUE)]
ps_unspl<-shift(resize(GRanges(unspl),width=1,fix="start"),shift=-ct)
spl<-ok_reads[grep(pattern="N",x=cigar(ok_reads))]
firstb<-as.numeric(sapply(strsplit(cigar(spl),"M"),"[[",1))
lastb<-as.numeric(sapply(strsplit(cigar(spl),"M"),function(x){gsub(x[length(x)],pattern="^[^_]*N",replacement="")}))
lastok<-spl[lastb>ct]
lastok<-shift(resize(GRanges(lastok),width=1,fix="start"),shift=-ct)
firstok<-spl[firstb>=rl-ct]
firstok<-shift(resize(GRanges(firstok),width=1,fix="end"),shift=(rl-ct-1))
multi<-spl[firstb<rl-ct & lastb<=ct]
ps_spl<-GRanges()
seqlevels(ps_spl)<-seqllll
seqlengths(ps_spl)<-seqleee
if(length(multi)>0){
ps_spl<-get_ps_fromsplicemin(multi,cutoff=ct)
}
mcols(ps_unspl)<-NULL
mcols(firstok)<-NULL
mcols(lastok)<-NULL
mcols(ps_spl)<-NULL
seqlevels(firstok)<-seqllll
seqlevels(lastok)<-seqllll
seqlevels(ps_unspl)<-seqllll
seqlevels(ps_spl)<-seqllll
seqlengths(firstok)<-seqleee
seqlengths(lastok)<-seqleee
seqlengths(ps_unspl)<-seqleee
seqlengths(ps_spl)<-seqleee
ps_neg<-c(ps_unspl,firstok,lastok,ps_spl)
ps_neg_uniq<-ps_neg[mcols(ok_reads)$mapq>50]
ps_neg_uniq_mm<-ps_neg[mcols(ok_reads)$mapq>50 & nchar(mcols(ok_reads)$MD)>3]
}
all_ps<-sort(c(ps_plus,ps_neg))
uniq_ps<-sort(c(ps_plus_uniq,ps_neg_uniq))
uniq_mm_ps<-sort(c(ps_plus_uniq_mm,ps_neg_uniq_mm))
if(length(all_ps)>0){
ps_res<-unique(all_ps)
ps_res$score<-countOverlaps(ps_res,all_ps,type="equal")
all_ps<-ps_res
}
if(length(uniq_ps)>0){
ps_res<-unique(uniq_ps)
ps_res$score<-countOverlaps(ps_res,uniq_ps,type="equal")
uniq_ps<-ps_res
}
if(length(uniq_mm_ps)>0){
ps_res<-unique(uniq_mm_ps)
ps_res$score<-countOverlaps(ps_res,uniq_mm_ps,type="equal")
uniq_mm_ps<-ps_res
}
all_rl_ps[[as.character(rl)]]<-all_ps
uniq_rl_ps[[as.character(rl)]]<-uniq_ps
uniq_rl_mm_ps[[as.character(rl)]]<-uniq_mm_ps
}
#here comps
list_rlct<-list(all_rl_ps,uniq_rl_ps,uniq_rl_mm_ps)
names(list_rlct)<-c("P_sites_all","P_sites_uniq","P_sites_uniq_mm")
list_pss[[comp]]<-list_rlct
}
#for rl, merge psites
all_ps_comps<-GRangesList()
seqlevels(all_ps_comps)<-seqllll
seqlengths(all_ps_comps)<-seqleee
rls_comps<-unique(unlist(lapply(list_pss,FUN=function(x) names(x[["P_sites_all"]]) )))
for(rl in rls_comps){
reads_rl_comp<-GRanges()
seqlevels(reads_rl_comp)<-seqllll
seqlengths(reads_rl_comp)<-seqleee
for(comp in names(list_pss)){
if(sum(rl%in%names(list_pss[[comp]][["P_sites_all"]]))>0){
oth<-list_pss[[comp]][["P_sites_all"]][[rl]]
if(!is.null(oth)){
seqlevels(oth)<-seqllll
seqlengths(oth)<-seqleee
reads_rl_comp<-c(reads_rl_comp,oth)
}
}
all_ps_comps[[rl]]<-reads_rl_comp
}
}
uniq_ps_comps<-GRangesList()
seqlevels(uniq_ps_comps)<-seqllll
seqlengths(uniq_ps_comps)<-seqleee
rls_comps<-unique(unlist(lapply(list_pss,FUN=function(x) names(x[["P_sites_uniq"]]) )))
for(rl in rls_comps){
reads_rl_comp<-GRanges()
seqlevels(reads_rl_comp)<-seqllll
seqlengths(reads_rl_comp)<-seqleee
for(comp in names(list_pss)){
if(sum(rl%in%names(list_pss[[comp]][["P_sites_uniq"]]))>0){
oth<-list_pss[[comp]][["P_sites_uniq"]][[rl]]
if(!is.null(oth)){
seqlevels(oth)<-seqllll
seqlengths(oth)<-seqleee
reads_rl_comp<-c(reads_rl_comp,oth)
}
}
uniq_ps_comps[[rl]]<-reads_rl_comp
}
}
uniq_mm_ps_comps<-GRangesList()
seqlevels(uniq_mm_ps_comps)<-seqllll
seqlengths(uniq_mm_ps_comps)<-seqleee
rls_comps<-unique(unlist(lapply(list_pss,FUN=function(x) names(x[["P_sites_uniq_mm"]]) )))
for(rl in rls_comps){
reads_rl_comp<-GRanges()
seqlevels(reads_rl_comp)<-seqllll
seqlengths(reads_rl_comp)<-seqleee
for(comp in names(list_pss)){
if(sum(rl%in%names(list_pss[[comp]][["P_sites_uniq_mm"]]))>0){
oth<-list_pss[[comp]][["P_sites_uniq_mm"]][[rl]]
if(!is.null(oth)){
seqlevels(oth)<-seqllll
seqlengths(oth)<-seqleee
reads_rl_comp<-c(reads_rl_comp,oth)
}
}
uniq_mm_ps_comps[[rl]]<-reads_rl_comp
}
}
list_res<-list(all_ps_comps,uniq_ps_comps,uniq_mm_ps_comps,rang_jun,covall_plus,covall_min,covuni_plus,covuni_min)
names(list_res)<-c("P_sites_all","P_sites_uniq","P_sites_uniq_mm","junctions","coverage_all_plus","coverage_all_minus","coverage_uniq_plus","coverage_uniq_minus")
return(list_res)
}
cat(paste("Calculating P-sites positions and junctions ...", date(),"\n"))
P_sites_stats<-reduceByYield(X=opts,YIELD=yiel,MAP=mapp,REDUCE=reduc)
save(P_sites_stats,file = paste(dira,"P_sites_stats",sep = "/"))
readRDS("../test_human_hek.html_plots/rds/sample1_nucl_4_profiles_P_sites_metagene_subcodon_all")[[1]]
readRDS("../test_human_hek.html_plots/rds/sample1_nucl_4_profiles_P_sites_metagene_subcodon_all")[[1]]
source('~/projects/RiboseQC/R/riboseq_analysis.R')
source('~/projects/RiboseQC/R/riboseq_analysis.R')
library(RiboseQC)
getwd()
